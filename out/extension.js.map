{"version":3,"file":"extension.js","sources":["../src/shared/messages.ts","../src/shared/write.ts","../src/extension/utils.ts","../src/extension/settings.ts","../src/shared/state.ts","../src/extension/statusBarItem.ts","../src/extension/extensionCycle.ts","../src/extension/index.ts"],"sourcesContent":["export default {\r\n  admin: 'Run VS Code with admin privileges so the changes can be applied.',\r\n  enabled: 'Concise syntax enabled. Restart to take effect. ',\r\n  disabled:\r\n    'Concise syntax disabled and reverted to default. Restart to take effect.',\r\n  already_disabled: 'Concise syntax already disabled.',\r\n  somethingWrong: 'Something went wrong: ',\r\n  internalError: 'Internal error: ',\r\n  restartIde: 'Restart Visual Studio Code',\r\n  notfound: 'Concise syntax not found.',\r\n  notConfigured: 'Concise syntax path not configured.',\r\n  reloadAfterVersionUpgrade:\r\n    'Detected reloading Concise syntax after VSCode is upgraded. ' +\r\n    'Performing application only.',\r\n  cannotLoad: (url: string) => `Cannot load '${url}'. Skipping.` as const,\r\n} as const\r\n","import fs from 'fs'\r\nimport path from 'path'\r\nimport packageJson from '../../package.json'\r\n\r\nexport const extensionId = packageJson.publisher + '.' + packageJson.name\r\nexport const extensionScriptSrc = extensionId + '.js'\r\nexport const extensionScriptTag = () =>\r\n  new RegExp(\r\n    `<script.+${extensionId.replaceAll('.', '\\\\.')}.+\\/script>`,\r\n    'gm' // intermittently\r\n  )\r\n\r\nexport async function patchWorkbench(\r\n  res: Awaited<ReturnType<typeof preRead>>,\r\n  remoteWorkbenchPath: string\r\n) {\r\n  await fs.promises.copyFile(remoteWorkbenchPath, res.workbench.customPath)\r\n\r\n  const hash = ('' + Math.random()).substring(2, 7)\r\n  const newHtml = res.html\r\n    .replaceAll(extensionScriptTag(), '')\r\n    .replace(\r\n      /(<\\/html>)/,\r\n      `<script src=\"${extensionScriptSrc}?${hash}\"></script>` + '</html>'\r\n    )\r\n\r\n  await fs.promises.writeFile(res.workbench.path, newHtml, 'utf-8')\r\n}\r\nexport async function preRead(base: string) {\r\n  const workbenchPath = path.join(base, 'workbench.html')\r\n  const html = await fs.promises.readFile(workbenchPath, 'utf-8')\r\n  const wasActive = html.match(extensionScriptTag())\r\n  return {\r\n    html,\r\n    wasActive,\r\n    workbench: {\r\n      path: workbenchPath,\r\n      customPath: path.join(base, extensionScriptSrc),\r\n    },\r\n  }\r\n}\r\n","import * as vscode from 'vscode'\r\n\r\n// FIXME: handle the errors where it is being used\r\nexport function _catch(e: unknown) {}\r\n\r\nexport function useState<T extends string>(\r\n  context: vscode.ExtensionContext,\r\n  key: string\r\n) {\r\n  return {\r\n    value: '' as any,\r\n    read() {\r\n      return (this.value = context.workspaceState.get(key) as T | undefined)\r\n    },\r\n    write(newState: T) {\r\n      this.value = newState\r\n      context.workspaceState.update(key, newState)\r\n      return newState\r\n    },\r\n  }\r\n}\r\n","import * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport { _catch, useState } from './utils'\r\nimport JSONC from 'comment-json'\r\n\r\nexport const key = 'editor.tokenColorCustomizations'\r\nconst textMateRules = [\r\n  {\r\n    name: 'kauderk.concise-syntax.text',\r\n    scope: ['meta.jsx.children.tsx'],\r\n    settings: {\r\n      foreground: '#B59E7A',\r\n    },\r\n  },\r\n  {\r\n    name: 'kauderk.concise-syntax.redundant',\r\n    scope: [\r\n      'punctuation.definition.tag.begin.tsx',\r\n      'punctuation.definition.tag.end.tsx',\r\n      'punctuation.section.embedded.begin.tsx',\r\n      'punctuation.section.embedded.end.tsx',\r\n      'punctuation.terminator.statement.tsx',\r\n      'concise.redundant-syntax',\r\n    ],\r\n    settings: {\r\n      foreground: '#00b51b00',\r\n    },\r\n  },\r\n  {\r\n    name: 'kauderk.concise-syntax.quote.begin',\r\n    scope: ['punctuation.definition.string.begin.tsx'],\r\n    settings: {\r\n      foreground: '#b5a90000',\r\n    },\r\n  },\r\n  {\r\n    name: 'kauderk.concise-syntax.quote.end',\r\n    scope: ['punctuation.definition.string.end.tsx'],\r\n    settings: {\r\n      foreground: '#b5030000',\r\n    },\r\n  },\r\n]\r\nconst settingsJsonPath = '.vscode/settings.json'\r\nconst remoteSettingsJsonPath = 'remote.settings.jsonc'\r\n\r\n// TODO: avoid writing defensive code, someone else surely knows a better way to do this\r\nexport async function updateSettingsCycle(\r\n  context: vscode.ExtensionContext,\r\n  operation: 'inactive' | 'active'\r\n) {\r\n  const res = await tryParseSettings()\r\n  if (!res) return\r\n  const { wasEmpty, specialObjectUserRules: userRules } = res\r\n\r\n  const textColor = useState(context, 'textColor')\r\n\r\n  // could be more elegant...\r\n  // this has to be faster than writing the file every time, otherwise it's not worth it\r\n  let diff = false\r\n  if (operation == 'active') {\r\n    if (wasEmpty) {\r\n      diff = true\r\n      userRules.push(...textMateRules)\r\n      tryPatchTextColor(userRules[0], 'patch')\r\n    } else {\r\n      const userIndexToNameMap = new Map(userRules.map((r, i) => [r?.name, i]))\r\n\r\n      for (const presetRule of textMateRules) {\r\n        const i = userIndexToNameMap.get(presetRule.name) ?? -1\r\n        if (i > -1) {\r\n          const userRule = userRules[i]\r\n          if (!userRule) {\r\n            userRules[i] = presetRule\r\n            tryPatchTextColor(presetRule, 'patch')\r\n            diff = true\r\n            continue\r\n          }\r\n\r\n          if (presetRule.scope.some((s, i) => s !== userRule.scope?.[i])) {\r\n            userRule.scope = presetRule.scope\r\n            diff = true\r\n          }\r\n          if (!userRule.settings?.foreground?.match(/^#/)) {\r\n            userRule.settings = presetRule.settings\r\n            tryPatchTextColor(userRule, 'patch')\r\n            diff = true\r\n          }\r\n        } else {\r\n          userRules.push(presetRule)\r\n          tryPatchTextColor(presetRule, 'patch')\r\n          diff = true\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (wasEmpty) {\r\n      diff = false\r\n      return\r\n    } else {\r\n      const indexToNameMap = new Map(textMateRules.map((r, i) => [r.name, i]))\r\n      for (let i = userRules.length - 1; i >= 0; i--) {\r\n        const name = userRules[i]?.name!\r\n        const j = indexToNameMap.get(name)!\r\n        if (j > -1) {\r\n          diff = true\r\n          userRules.splice(i, 1)\r\n          tryPatchTextColor(textMateRules[j], 'write')\r\n        }\r\n      }\r\n    }\r\n  }\r\n  // so far this is the only variable that matters, if there's need for other check the previous git commit\r\n  function tryPatchTextColor(rule: any, action: 'write' | 'patch') {\r\n    if (rule?.name != textMateRules[0].name) return\r\n    const color = textMateRules[0].settings.foreground\r\n    if (action == 'write') {\r\n      textColor.write(rule?.settings?.foreground || color)\r\n    } else {\r\n      rule.settings = rule.settings || {}\r\n      rule.settings.foreground = textColor.read() || color\r\n    }\r\n  }\r\n\r\n  // sort by textMateRules and put them at the end of userRules\r\n  // send it to the end of the array\r\n  ;[...textMateRules].reverse().forEach((r, relative, _arr) => {\r\n    const index = userRules.findIndex((_r) => _r?.name == r.name)\r\n    if (index < 0) return\r\n    const end = userRules.length - 1 - relative\r\n    if (index != end) {\r\n      diff = true\r\n      move(userRules, index, end)\r\n    }\r\n  })\r\n\r\n  if (!diff) {\r\n    return true\r\n  }\r\n\r\n  await res.write()\r\n}\r\n\r\nasync function tryParseSettings() {\r\n  const workspace = vscode.workspace.workspaceFolders?.[0].uri\r\n  if (!workspace) {\r\n    vscode.window.showErrorMessage(\r\n      'No workspace found: cannot update textMateRules'\r\n    )\r\n    return\r\n  }\r\n\r\n  const userSettingsPath = workspace.fsPath + '/' + settingsJsonPath\r\n\r\n  let raw_json: string | undefined\r\n  let config: any\r\n  try {\r\n    raw_json = await fs.promises.readFile(userSettingsPath, 'utf-8')\r\n    config = JSONC.parse(raw_json)\r\n  } catch (error) {\r\n    config ??= {}\r\n    console.error(error)\r\n  }\r\n\r\n  if (raw_json === undefined) {\r\n    vscode.window.showErrorMessage(\r\n      `Cannot read ${settingsJsonPath}: does not exist or is not valid JSON`\r\n    )\r\n    return\r\n  }\r\n\r\n  // NOTE: This is a special object https://www.npmjs.com/package/comment-json#commentarray\r\n  let userRules: DeepPartial<typeof textMateRules> | undefined =\r\n    config?.[key]?.textMateRules\r\n\r\n  if (userRules && !Array.isArray(userRules)) {\r\n    vscode.window.showErrorMessage(\r\n      `${settingsJsonPath}: ${key}.textMateRules is not an array`\r\n    )\r\n    return\r\n  }\r\n\r\n  const wasEmpty = !userRules || userRules?.length == 0\r\n  if (!userRules) {\r\n    userRules = []\r\n    config[key] = { textMateRules: userRules }\r\n  }\r\n  return {\r\n    specialObjectUserRules: userRules,\r\n    wasEmpty,\r\n    async write() {\r\n      try {\r\n        if (raw_json === undefined) throw new Error('raw_json is undefined')\r\n        const indent = raw_json.match(/^\\s+/)?.[0] ?? '  '\r\n        const virtualJson = JSONC.stringify(config, null, indent)\r\n        if (virtualJson === raw_json) return\r\n        await fs.promises.writeFile(userSettingsPath, virtualJson, 'utf-8')\r\n      } catch (error: any) {\r\n        vscode.window.showErrorMessage(\r\n          'Failed to write textMateRules. Error: ' + error.message\r\n        )\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\ntype DeepPartial<T> = T extends object\r\n  ? {\r\n      [P in keyof T]?: DeepPartial<T[P]>\r\n    }\r\n  : T\r\nfunction move(arr: any[], fromIndex: number, toIndex: number) {\r\n  var element = arr[fromIndex]\r\n  arr.splice(fromIndex, 1)\r\n  arr.splice(toIndex, 0, element)\r\n}\r\n","export const state = {\r\n  active: 'active',\r\n  inactive: 'inactive',\r\n  disposed: 'disposed',\r\n  error: 'error',\r\n} as const\r\nexport type State = (typeof state)[keyof typeof state]\r\n\r\n/**\r\n * Exploit the fact that vscode will render strings to the DOM\r\n */\r\nexport const IState = {\r\n  /**\r\n   *\r\n   * @param state\r\n   * @returns\r\n   */\r\n  encode(state: State) {\r\n    return `Concise Syntax: ` + state\r\n  },\r\n  /**\r\n   * VSCode will reinterpret the string: \"<?icon>  <extensionName>, <?IState.encode>\"\r\n   * @param string\r\n   * @returns\r\n   */\r\n  decode(string?: string) {\r\n    return Object.values(state)\r\n      .reverse()\r\n      .find((state) => string?.includes(state))\r\n  },\r\n}\r\n","import { extensionId } from 'src/shared/write'\r\nimport * as vscode from 'vscode'\r\nimport packageJson from '../../package.json'\r\nimport { key, updateSettingsCycle } from './settings'\r\nimport { IState, State, state } from 'src/shared/state'\r\nimport { useState } from './utils'\r\n\r\nlet _item: vscode.StatusBarItem | undefined\r\n\r\n/**\r\n * The icon's purpose is to indicate the workbench.ts script the extension is active.\r\n */\r\nlet statusIcon = 'symbol-keyword'\r\nlet statusIconLoading = 'loading~spin'\r\nconst iconText = '' //' Concise'\r\nlet busy: boolean | undefined\r\nlet disposeConfiguration = () => {}\r\nlet crashedMessage = ''\r\n\r\nexport async function ExtensionState_statusBarItem(\r\n  context: vscode.ExtensionContext,\r\n  setState: State\r\n) {\r\n  // TODO: decouple the update from the status bar item\r\n\r\n  const windowState = getWindowState(context)\r\n  await windowState.write(setState)\r\n\r\n  vscode.commands.executeCommand(\r\n    'setContext',\r\n    'extension.disposed',\r\n    setState == state.disposed\r\n  )\r\n\r\n  async function REC_nextStateCycle(\r\n    next: State,\r\n    settings: 'active' | 'inactive'\r\n  ) {\r\n    if (!_item) {\r\n      vscode.window.showErrorMessage('No status bar item found')\r\n      return\r\n    } else if (crashedMessage) {\r\n      vscode.window.showErrorMessage(\r\n        `The extension crashed when updating .vscode/settings.json with property ${key}.textMateRules with error: ${crashedMessage}`\r\n      )\r\n      return\r\n    }\r\n\r\n    try {\r\n      busy = true\r\n\r\n      disposeConfiguration()\r\n\r\n      _item.text = `$(${statusIconLoading})` + iconText\r\n      const task = createTask()\r\n      const watcher = vscode.workspace.onDidChangeConfiguration(task.resolve)\r\n      const cash = await updateSettingsCycle(context, settings)\r\n      await windowState.write(next)\r\n      await Promise.race([\r\n        task.promise, // either the configuration changes or the timeout\r\n        new Promise((resolve) => setTimeout(resolve, !cash ? 3000 : 0)),\r\n      ])\r\n      watcher.dispose()\r\n      _item.text = `$(${statusIcon})` + iconText\r\n      _item.tooltip = IState.encode(next)\r\n      // hold this thread and allow the dom to render the IState\r\n      await new Promise((resolve) => setTimeout(resolve, 100))\r\n\r\n      if (next != state.disposed) {\r\n        _item.show()\r\n      } else {\r\n        _item.hide()\r\n      }\r\n\r\n      // prettier-ignore\r\n      disposeConfiguration = vscode.workspace.onDidChangeConfiguration(async (config) => {\r\n\t\t\t\tif (busy || !config.affectsConfiguration(key)) return\r\n\t\t\t\tconst next = windowState.read()\r\n\t\t\t\tif (!next) return\r\n\t\t\t\t// TODO: add a throttle to be extra safe\r\n\t\t\t\tawait REC_nextStateCycle(next, binary(next))\r\n\t\t\t}).dispose\r\n\r\n      busy = false\r\n    } catch (error: any) {\r\n      debugger\r\n      crashedMessage = error?.message || 'unknown'\r\n      _item.text = `$(error)` + iconText\r\n      _item.tooltip = IState.encode(state.error)\r\n      _item.show()\r\n    }\r\n  }\r\n  if (_item) {\r\n    await REC_nextStateCycle(setState, binary(setState))\r\n    return\r\n  }\r\n\r\n  const myCommandId = packageJson.contributes.commands[2].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(myCommandId, async () => {\r\n      const extensionState = getStateStore(context)\r\n      if (extensionState.read() == 'disposed') {\r\n        return vscode.window.showInformationMessage(\r\n          'The extension is disposed. Mount it to use this command.'\r\n        )\r\n      }\r\n      if (busy) {\r\n        return vscode.window.showInformationMessage(\r\n          'The extension is busy. Try again in a few seconds.'\r\n        )\r\n      }\r\n\r\n      const next = flip(windowState.read())\r\n      await REC_nextStateCycle(next, next)\r\n    })\r\n  )\r\n\r\n  _item = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 0)\r\n  _item.command = myCommandId\r\n\r\n  const next = windowState.read() ?? 'active'\r\n  await REC_nextStateCycle(next, binary(next))\r\n\r\n  context.subscriptions.push(_item, {\r\n    dispose() {\r\n      disposeConfiguration()\r\n    },\r\n  })\r\n}\r\n\r\nexport function binary(state?: State) {\r\n  return state == 'active' ? 'active' : 'inactive'\r\n}\r\nfunction flip(next?: State) {\r\n  return next == 'active' ? 'inactive' : 'active'\r\n}\r\n\r\nexport function getWindowState(context: vscode.ExtensionContext) {\r\n  return useState<State>(context, extensionId + '.window')\r\n}\r\nexport function getStateStore(context: vscode.ExtensionContext) {\r\n  return useState<'active' | 'inactive' | 'disposed'>(\r\n    context,\r\n    extensionId + '.extension'\r\n  )\r\n}\r\nexport function getErrorStore(context: vscode.ExtensionContext) {\r\n  return useState<'error' | 'throw' | 'unhandled'>(\r\n    context,\r\n    extensionId + '.error'\r\n  )\r\n}\r\n\r\nfunction createTask() {\r\n  let resolve = (value?: unknown) => {},\r\n    reject = () => {}\r\n  const promise = new Promise((_resolve, _reject) => {\r\n    reject = _reject\r\n    resolve = _resolve\r\n  })\r\n  return { promise, resolve, reject }\r\n}\r\n","import path from 'path'\r\nimport {\r\n  extensionId,\r\n  patchWorkbench,\r\n  extensionScriptTag,\r\n  preRead,\r\n} from 'src/shared/write'\r\nimport { _catch } from './utils'\r\nimport * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport msg from '../shared/messages'\r\n\r\nexport async function installCycle(context: vscode.ExtensionContext) {\r\n  const res = await read()\r\n  if (res.wasActive) {\r\n    console.log('vscode-concise-syntax is active!')\r\n    return res.wasActive\r\n  }\r\n\r\n  let remoteWorkbenchPath\r\n  let ext = vscode.extensions.getExtension(extensionId)\r\n  if (ext && ext.extensionPath) {\r\n    remoteWorkbenchPath = path.resolve(ext.extensionPath, 'out/workbench.js')\r\n  } else {\r\n    remoteWorkbenchPath = path.resolve(__dirname, 'index.js')\r\n  }\r\n  await patchWorkbench(res, remoteWorkbenchPath)\r\n}\r\n\r\nexport async function uninstallCycle(context: vscode.ExtensionContext) {\r\n  const { html, wasActive, workbench } = await read()\r\n  if (wasActive) {\r\n    const newHtml = html.replaceAll(extensionScriptTag(), '')\r\n    await fs.promises.writeFile(workbench.path, newHtml, 'utf-8')\r\n  }\r\n  await fs.promises.unlink(workbench.customPath).catch(_catch)\r\n\r\n  return wasActive\r\n}\r\n// how do you make javascript freak out about promises/errors?\r\nexport function deactivateCycle() {\r\n  // FIXME: why is this hook not working? :(\r\n  console.log('vscode-concise-syntax is deactivated!')\r\n}\r\nexport async function read() {\r\n  if (!require.main?.filename) {\r\n    vscode.window.showErrorMessage(msg.internalError + 'no main filename')\r\n    throw new Error('no main filename')\r\n  }\r\n  const appDir = path.dirname(require.main.filename)\r\n  const base = path.join(appDir, 'vs', 'code', 'electron-sandbox', 'workbench')\r\n  return await preRead(base)\r\n}\r\n","import * as vscode from 'vscode'\r\nimport msg from '../shared/messages'\r\nimport packageJson from '../../package.json'\r\nimport { extensionId } from '../shared/write'\r\nimport { _catch } from './utils'\r\nimport {\r\n  getErrorStore,\r\n  getStateStore,\r\n  ExtensionState_statusBarItem,\r\n  getWindowState,\r\n  binary,\r\n} from './statusBarItem'\r\nimport { installCycle, read, uninstallCycle } from './extensionCycle'\r\nimport { state } from '../shared/state'\r\nexport { deactivateCycle as deactivate } from './extensionCycle'\r\n\r\nexport async function activate(context: vscode.ExtensionContext) {\r\n  const extensionState = getStateStore(context) // why do I need two active states?\r\n\r\n  // FIXME: use a better state manager or state machine\r\n  const { wasActive } = await read()\r\n\r\n  const reloadCommand = packageJson.contributes.commands[0].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(reloadCommand, async () => {\r\n      try {\r\n        if (extensionState.read() == state.active) {\r\n          vscode.window.showInformationMessage('Already Mounted')\r\n        } else {\r\n          await uninstallCycle(context)\r\n          await installCycle(context)\r\n\r\n          if (!wasActive) {\r\n            await extensionState.write(state.inactive)\r\n            reloadWindowMessage(msg.enabled)\r\n          } else {\r\n            await extensionState.write(state.active)\r\n            await ExtensionState_statusBarItem(context, state.active)\r\n            vscode.window.showInformationMessage('Mount: using cache')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      }\r\n    })\r\n  )\r\n  const disposeCommand = packageJson.contributes.commands[1].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(disposeCommand, async () => {\r\n      try {\r\n        const wasActive = await uninstallCycle(context)\r\n        await extensionState.write(state.disposed)\r\n        await ExtensionState_statusBarItem(context, state.disposed)\r\n\r\n        const [message, ...options] = wasActive\r\n          ? ['Disposed', 'Reload', 'Uninstall']\r\n          : ['Already Disposed', 'Uninstall']\r\n        // prettier-ignore\r\n        const selection = await vscode.window.showInformationMessage(message, ...options)\r\n\r\n        if (selection == 'Reload') {\r\n          vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n        } else if (selection == 'Uninstall') {\r\n          vscode.commands.executeCommand(\r\n            'workbench.extensions.action.uninstallExtension',\r\n            extensionId\r\n          )\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      }\r\n    })\r\n  )\r\n\r\n  try {\r\n    const previousExtensionState = extensionState.read()\r\n    // FIXME: get me out of here\r\n    vscode.commands.executeCommand(\r\n      'setContext',\r\n      'extension.disposed',\r\n      previousExtensionState == state.disposed\r\n    )\r\n    if (previousExtensionState != state.disposed) {\r\n      const isActive = await installCycle(context)\r\n      await extensionState.write(state.active)\r\n\r\n      if (!wasActive) {\r\n        reloadWindowMessage(msg.enabled)\r\n      } else {\r\n        const windowState =\r\n          previousExtensionState == state.inactive && isActive\r\n            ? state.active\r\n            : binary(getWindowState(context).read() ?? state.active)\r\n        await ExtensionState_statusBarItem(context, windowState)\r\n      }\r\n    }\r\n  } catch (error) {\r\n    __catch(error)\r\n  }\r\n\r\n  console.log('vscode-concise-syntax is active')\r\n\r\n  function __catch(e: unknown) {\r\n    console.error(e)\r\n    const error = getErrorStore(context)\r\n    error.write('unhandled')\r\n  }\r\n}\r\n\r\nfunction reloadWindowMessage(message: string) {\r\n  vscode.window\r\n    .showInformationMessage(message, { title: msg.restartIde })\r\n    .then((selection) => {\r\n      if (selection) {\r\n        vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n      }\r\n    })\r\n}\r\n"],"names":["key","i","name","vscode","fs","state","next","wasActive"],"mappings":"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"}