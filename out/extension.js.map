{"version":3,"file":"extension.js","sources":["../src/shared/messages.ts","../src/workbench/keys.ts","../src/shared/write.ts","../src/extension/utils.ts","../src/shared/clone.ts","../src/extension/settings.ts","../src/shared/state.ts","../src/shared/utils.ts","../src/extension/statusBarItem.ts","../src/extension/extensionCycle.ts","../src/extension/index.ts"],"sourcesContent":["export default {\r\n  admin: 'Run VS Code with admin privileges so the changes can be applied.',\r\n  enabled: 'Concise syntax enabled. Restart to take effect. ',\r\n  disabled:\r\n    'Concise syntax disabled and reverted to default. Restart to take effect.',\r\n  already_disabled: 'Concise syntax already disabled.',\r\n  somethingWrong: 'Something went wrong: ',\r\n  internalError: 'Internal error: ',\r\n  restartIde: 'Restart Visual Studio Code',\r\n  notfound: 'Concise syntax not found.',\r\n  notConfigured: 'Concise syntax path not configured.',\r\n  reloadAfterVersionUpgrade:\r\n    'Detected reloading Concise syntax after VSCode is upgraded. ' +\r\n    'Performing application only.',\r\n  cannotLoad: (url: string) => `Cannot load '${url}'. Skipping.` as const,\r\n} as const\r\n","import type packageJson from '../../package.json'\r\n// FIXME: find a way to compile/tree shake the import package.json\r\nexport const publisher: (typeof packageJson)['publisher'] = 'kauderk'\r\nexport const extensionName: (typeof packageJson)['name'] = `concise-syntax`\r\nexport const extensionDisplayName: (typeof packageJson)['displayName'] = `Concise Syntax`\r\nexport const calibrateWindowCommandPlaceholder = `Calibrate Window`\r\n\r\nexport const extensionId = `${publisher}.${extensionName}` as const\r\nexport const extensionScriptSrc = `${extensionId}.js` as const\r\nexport const windowId = `window.${extensionId}` as const\r\n// exploit the fact that vscode renders data to the dom, could be any other attribute\r\nexport const bridgeBetweenVscodeExtension = 'aria-label'\r\n\r\nexport const editorSelector = '.editor-instance'\r\nexport const idSelector = '[data-mode-id=\"typescriptreact\"]'\r\nexport const viewLinesSelector = '.view-lines.monaco-mouse-cursor-text'\r\nexport const linesSelector = `${idSelector} ${viewLinesSelector}`\r\nexport const overlaySelector = '.view-overlays'\r\nexport const highlightSelector = `${idSelector} ${overlaySelector}`\r\nexport const selectedSelector = '.selected-text'\r\nexport const currentSelector = '.current-line'\r\nexport const languages = ['typescriptreact', 'javascriptreact']\r\nexport const splitViewContainerSelector = '.split-view-container'\r\n\r\nexport const calibrateTimeout = 5_000\r\n","import fs from 'fs'\r\nimport path from 'path'\r\n\r\nexport { extensionId } from '../workbench/keys'\r\nimport { extensionScriptSrc, extensionId } from '../workbench/keys'\r\nexport const extensionScriptTag = () =>\r\n  new RegExp(\r\n    `<script.+${extensionId.replaceAll('.', '\\\\.')}.+\\/script>`,\r\n    'gm' // intermittently\r\n  )\r\n\r\nexport async function patchWorkbench(\r\n  res: Awaited<ReturnType<typeof preRead>>,\r\n  remoteWorkbenchPath: string\r\n) {\r\n  await fs.promises.copyFile(remoteWorkbenchPath, res.workbench.customPath)\r\n\r\n  const hash = ('' + Math.random()).substring(2, 7)\r\n  const newHtml = res.html\r\n    .replaceAll(extensionScriptTag(), '')\r\n    .replace(\r\n      /(<\\/html>)/,\r\n      `<script src=\"${extensionScriptSrc}?${hash}\"></script>` + '</html>'\r\n    )\r\n\r\n  await fs.promises.writeFile(res.workbench.path, newHtml, 'utf-8')\r\n}\r\nexport async function preRead(base: string) {\r\n  const workbenchPath = path.join(base, 'workbench.html')\r\n  const html = await fs.promises.readFile(workbenchPath, 'utf-8')\r\n  const wasActive = html.match(extensionScriptTag())\r\n  return {\r\n    html,\r\n    wasActive,\r\n    workbench: {\r\n      path: workbenchPath,\r\n      customPath: path.join(base, extensionScriptSrc),\r\n    },\r\n  }\r\n}\r\n","import { extensionId } from 'src/workbench/keys'\r\nimport * as vscode from 'vscode'\r\n\r\n// FIXME: handle the errors where it is being used\r\nexport function _catch(e: unknown) {}\r\n\r\nexport function useState<S extends string, T>(\r\n  context: vscode.ExtensionContext,\r\n  key: S,\r\n  type: T // I don't like weaning my type hat\r\n) {\r\n  const _key = `${extensionId}.workspace.${key}` as const\r\n  return {\r\n    key: _key,\r\n    value: <T | undefined>undefined,\r\n    read() {\r\n      return (this.value = context.workspaceState.get(_key))\r\n    },\r\n    async write(newState: T) {\r\n      this.value = newState\r\n      await context.workspaceState.update(_key, newState)\r\n      return newState\r\n    },\r\n  }\r\n}\r\nexport function useGlobal<S extends string, T>(\r\n  context: vscode.ExtensionContext,\r\n  key: S,\r\n  type: T // I don't like weaning my type hat\r\n) {\r\n  const _key = `${extensionId}.global.${key}` as const\r\n  return {\r\n    key: _key,\r\n    value: <T | undefined>undefined,\r\n    read() {\r\n      return (this.value = context.globalState.get(_key))\r\n    },\r\n    async write(newState: T) {\r\n      this.value = newState\r\n      await context.globalState.update(_key, newState)\r\n      return newState\r\n    },\r\n  }\r\n}\r\n","export function Clone<T extends object>(o: T, m?: any): T {\r\n  // return non object values\r\n  if ('object' !== typeof o) return o\r\n  // m: a map of old refs to new object refs to stop recursion\r\n  if ('object' !== typeof m || null === m) m = new WeakMap()\r\n  let n = m.get(o)\r\n  if ('undefined' !== typeof n) return n\r\n  // shallow/leaf clone object\r\n  let c = Object.getPrototypeOf(o).constructor\r\n  // TODO: specialize copies for expected built in types i.e. Date etc\r\n  switch (c) {\r\n    // shouldn't be copied, keep reference\r\n    case Boolean:\r\n    case Error:\r\n    case Function:\r\n    case Number:\r\n    case Promise:\r\n    case String:\r\n    case Symbol:\r\n    case WeakMap:\r\n    case WeakSet:\r\n      n = o\r\n      break\r\n    // array like/collection objects\r\n    case Array:\r\n      // @ts-ignore\r\n\r\n      m.set(o, (n = o.slice(0)))\r\n      // recursive copy for child objects\r\n      // @ts-ignore\r\n      n.forEach(function (v, i) {\r\n        if ('object' === typeof v) n[i] = Clone(v, m)\r\n      })\r\n      break\r\n    case ArrayBuffer:\r\n      // @ts-ignore\r\n      m.set(o, (n = o.slice(0)))\r\n      break\r\n    case DataView:\r\n      m.set(\r\n        o,\r\n        // @ts-ignore\r\n        (n = new c(Clone(o.buffer, m), o.byteOffset, o.byteLength))\r\n      )\r\n      break\r\n    case Map:\r\n    case Set:\r\n      // @ts-ignore\r\n      m.set(o, (n = new c(Clone(Array.from(o.entries()), m))))\r\n      break\r\n    case Int8Array:\r\n    case Uint8Array:\r\n    case Uint8ClampedArray:\r\n    case Int16Array:\r\n    case Uint16Array:\r\n    case Int32Array:\r\n    case Uint32Array:\r\n    case Float32Array:\r\n    case Float64Array:\r\n      // @ts-ignore\r\n      m.set(o, (n = new c(Clone(o.buffer, m), o.byteOffset, o.length)))\r\n      break\r\n    // use built in copy constructor\r\n    case Date:\r\n    case RegExp:\r\n      m.set(o, (n = new c(o)))\r\n      break\r\n    // fallback generic object copy\r\n    default:\r\n      m.set(o, (n = Object.assign(new c(), o)))\r\n      // recursive copy for child objects\r\n      for (c in n) if ('object' === typeof n[c]) n[c] = Clone(n[c], m)\r\n  }\r\n  return n\r\n}\r\n","import * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport { _catch, useState } from './utils'\r\nimport JSONC from 'comment-json'\r\nimport { extensionId } from 'src/workbench/keys'\r\nimport { Clone } from 'src/shared/clone'\r\n\r\nexport const key = 'editor.tokenColorCustomizations'\r\nconst name = `${extensionId}.`\r\ntype textMateRulesNames = (typeof TextMateRules)[number]['name']\r\nexport type { textMateRulesNames }\r\nconst TextMateRules = [\r\n  {\r\n    name: 'text',\r\n    scope: ['meta.jsx.children.tsx'],\r\n    settings: { foreground: '#FF0000' },\r\n  },\r\n  {\r\n    name: 'tag.begin',\r\n    scope: ['punctuation.definition.tag.begin.tsx'],\r\n    settings: { foreground: '#59ff00' },\r\n  },\r\n  {\r\n    name: 'tag.end',\r\n    scope: ['punctuation.definition.tag.end.tsx'],\r\n    settings: { foreground: '#59ff00' },\r\n  },\r\n  {\r\n    name: 'tag.entity',\r\n    scope: ['entity.name.tag.tsx'],\r\n    settings: { foreground: '#ff3900' },\r\n  },\r\n  {\r\n    name: 'tag.component',\r\n    scope: ['support.class.component.tsx'],\r\n    settings: { foreground: '#ff9900' },\r\n  },\r\n  {\r\n    name: 'bracket.begin',\r\n    scope: ['punctuation.section.embedded.begin.tsx'],\r\n    settings: { foreground: '#0037ff' },\r\n  },\r\n  {\r\n    name: 'bracket.end',\r\n    scope: ['punctuation.section.embedded.end.tsx'],\r\n    settings: { foreground: '#0037ff' },\r\n  },\r\n  {\r\n    name: 'string.begin',\r\n    scope: [\r\n      'punctuation.definition.string.begin.tsx',\r\n      'punctuation.definition.string.template.begin.tsx',\r\n    ],\r\n    settings: { foreground: '#ffb300' },\r\n  },\r\n  {\r\n    name: 'string.end',\r\n    scope: [\r\n      'punctuation.definition.string.end.tsx',\r\n      'punctuation.definition.string.template.end.tsx',\r\n    ],\r\n    settings: { foreground: '#f2ff00' },\r\n  },\r\n  {\r\n    name: 'comma',\r\n    scope: ['punctuation.separator.parameter.tsx'],\r\n    settings: { foreground: '#82a4a6' },\r\n  },\r\n  {\r\n    name: 'lastComma',\r\n    scope: ['punctuation.separator.comma.tsx'],\r\n    settings: { foreground: '#686868' },\r\n  },\r\n  {\r\n    name: 'terminator',\r\n    scope: ['punctuation.terminator.statement.tsx'],\r\n    settings: { foreground: '#ff00ee' },\r\n  },\r\n  {\r\n    name: 'ternary',\r\n    scope: ['keyword.operator.ternary.tsx'],\r\n    settings: { foreground: '#ae00ff' },\r\n  },\r\n] as const\r\ntype _TextMateRules = {\r\n  name: string\r\n  scope: string[]\r\n  settings: { foreground: string }\r\n}[]\r\nexport function getTextMateRules(context: vscode.ExtensionContext) {\r\n  return useState(context, 'textMateRules', <string>{})\r\n}\r\nexport async function updateWriteTextMateRules(\r\n  context: vscode.ExtensionContext,\r\n  cb: (mutableTextMaleRules: _TextMateRules, nameSuffix: string) => void\r\n) {\r\n  const store = await getOrDefaultTextMateRules(context)\r\n  cb(store, name)\r\n  await getTextMateRules(context).write(JSON.stringify(store))\r\n}\r\n\r\nconst settingsJsonPath = '.vscode/settings.json'\r\n\r\n// TODO: avoid writing defensive code, someone else surely knows a better way to do this\r\nexport async function updateSettingsCycle(\r\n  context: vscode.ExtensionContext,\r\n  operation: 'inactive' | 'active'\r\n) {\r\n  const res = await tryParseSettings()\r\n  if (res instanceof Error) return res\r\n  const { wasEmpty, specialObjectUserRules: userRules } = res\r\n  const textMateRules = await getOrDefaultTextMateRules(context)\r\n\r\n  // could be more elegant...\r\n  // this has to be faster than writing the file every time, otherwise it's not worth it\r\n  let diff = false\r\n  if (operation == 'active') {\r\n    if (wasEmpty) {\r\n      diff = true\r\n      userRules.push(...textMateRules)\r\n    } else {\r\n      const userIndexToNameMap = new Map(userRules.map((r, i) => [r?.name, i]))\r\n\r\n      for (const presetRule of textMateRules) {\r\n        const i = userIndexToNameMap.get(presetRule.name) ?? -1\r\n        if (i > -1) {\r\n          const userRule = userRules[i]\r\n          if (!userRule) {\r\n            userRules[i] = presetRule\r\n            diff = true\r\n            continue\r\n          }\r\n\r\n          if (presetRule.scope.some((s, i) => s !== userRule.scope?.[i])) {\r\n            userRule.scope = presetRule.scope\r\n            diff = true\r\n          }\r\n          // prettier-ignore\r\n          if (userRule.settings?.foreground !== presetRule.settings.foreground) {\r\n\t\t\t\t\t\tuserRule.settings ??= {}\r\n            userRule.settings.foreground = presetRule.settings.foreground\r\n            diff = true\r\n          }\r\n        } else {\r\n          userRules.push(presetRule)\r\n          diff = true\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (wasEmpty) {\r\n      diff = false\r\n      return\r\n    } else {\r\n      const indexToNameMap = new Map(textMateRules.map((r, i) => [r.name, i]))\r\n      for (let i = userRules.length - 1; i >= 0; i--) {\r\n        const j = indexToNameMap.get(userRules[i]?.name!)!\r\n        if (j > -1) {\r\n          diff = true\r\n          userRules.splice(i, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // sort by textMateRules and put them at the end of userRules\r\n  // send it to the end of the array\r\n  ;[...textMateRules].reverse().forEach((r, relative, _arr) => {\r\n    const index = userRules.findIndex((_r) => _r?.name == r.name)\r\n    if (index < 0) return\r\n    const end = userRules.length - 1 - relative\r\n    if (index != end) {\r\n      diff = true\r\n      move(userRules, index, end)\r\n    }\r\n  })\r\n\r\n  if (!diff) {\r\n    return true\r\n  }\r\n\r\n  return res.write\r\n}\r\n\r\n// why is this so bloated?\r\nconst DefaultTextMateRules = () =>\r\n  Clone(\r\n    TextMateRules.map((r) => ({ ...r, name: `${name}${r.name}` }))\r\n  ) as any as _TextMateRules\r\nasync function getOrDefaultTextMateRules(context: vscode.ExtensionContext) {\r\n  try {\r\n    const serialized = await getTextMateRules(context).read()\r\n    if (serialized) {\r\n      const parsed: _TextMateRules = JSON.parse(serialized)\r\n      if (!Array.isArray(parsed)) {\r\n        throw new Error('textMateRules is not an array')\r\n      }\r\n      for (let i = 0; i < TextMateRules.length; i++) {\r\n        const rule = TextMateRules[i]\r\n        if (name + rule.name != parsed[i].name) {\r\n          // @ts-expect-error\r\n          parsed[i] = rule\r\n        }\r\n      }\r\n      // make sure it has the same values\r\n      parsed.length = TextMateRules.length\r\n      return parsed\r\n    } else {\r\n      return DefaultTextMateRules()\r\n    }\r\n  } catch (error: any) {\r\n    vscode.window.showErrorMessage(\r\n      'Failed to parse textMateRules. Error: ' + error?.message\r\n    )\r\n    return DefaultTextMateRules()\r\n  }\r\n}\r\n\r\nasync function tryParseSettings() {\r\n  const workspace = vscode.workspace.workspaceFolders?.[0].uri\r\n  if (!workspace) {\r\n    return new Error('No workspace found: cannot update textMateRules')\r\n  }\r\n\r\n  const userSettingsPath = workspace.fsPath + '/' + settingsJsonPath\r\n\r\n  let raw_json: string | undefined\r\n  let config: any\r\n  try {\r\n    raw_json = await fs.promises.readFile(userSettingsPath, 'utf-8')\r\n    config = JSONC.parse(raw_json)\r\n  } catch (error) {\r\n    config ??= {}\r\n    console.error(error)\r\n  }\r\n\r\n  if (raw_json === undefined) {\r\n    return new Error(\r\n      `Cannot read ${settingsJsonPath}: does not exist or is not valid JSON`\r\n    )\r\n  }\r\n\r\n  // NOTE: This is a special object https://www.npmjs.com/package/comment-json#commentarray\r\n  let userRules: DeepPartial<_TextMateRules> | undefined =\r\n    config?.[key]?.textMateRules\r\n\r\n  if (userRules && !Array.isArray(userRules)) {\r\n    return new Error(\r\n      `${settingsJsonPath}: ${key}.textMateRules is not an array`\r\n    )\r\n  }\r\n\r\n  const wasEmpty = !userRules || userRules?.length == 0\r\n  if (!userRules) {\r\n    userRules = []\r\n    config[key] = { textMateRules: userRules }\r\n  }\r\n  return {\r\n    specialObjectUserRules: userRules,\r\n    wasEmpty,\r\n    async write() {\r\n      try {\r\n        if (raw_json === undefined) throw new Error('raw_json is undefined')\r\n        const indent = raw_json.match(/^\\s+/)?.[0] ?? '  '\r\n        const virtualJson = JSONC.stringify(config, null, indent)\r\n        // if (virtualJson === raw_json) return\r\n        await fs.promises.writeFile(userSettingsPath, virtualJson, 'utf-8')\r\n        return 'Success: wrote textMateRules'\r\n      } catch (error: any) {\r\n        return new Error(\r\n          'Failed to write textMateRules. Error: ' +\r\n            (error.message || 'unknown')\r\n        )\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\ntype DeepPartial<T> = T extends object\r\n  ? {\r\n      [P in keyof T]?: DeepPartial<T[P]>\r\n    }\r\n  : T\r\nfunction move(arr: any[], fromIndex: number, toIndex: number) {\r\n  var element = arr[fromIndex]\r\n  arr.splice(fromIndex, 1)\r\n  arr.splice(toIndex, 0, element)\r\n}\r\n","import { extensionId } from '../workbench/keys'\r\nimport type packageJson from '../../package.json'\r\n\r\n//#region opacities\r\n// TODO: use the package.json.d.ts\r\ntype ExtractLastWord<T extends string> =\r\n  T extends `${infer _}.${infer LastWord}` ? LastWord : T\r\ntype opacitiesPropertyNames = ExtractLastWord<\r\n  keyof (typeof packageJson)['contributes']['configuration']['properties']\r\n>\r\n\r\nexport const OpacityNames = {\r\n  base: 'b',\r\n  selected: 's',\r\n  current: 'c',\r\n  hoverAll: 'ha',\r\n  hoverLine: 'hl',\r\n  bleedCurrentLines: 'bcl',\r\n} as const satisfies Record<opacitiesPropertyNames, string>\r\nexport const DefaultOpacity = {\r\n  base: 0,\r\n  selected: 0.5,\r\n  current: 0.6,\r\n  hoverAll: 0.7,\r\n  hoverLine: 1,\r\n  bleedCurrentLines: 1,\r\n} as const satisfies Opacities\r\nexport const OpacityTable = Object.entries(DefaultOpacity).reduce(\r\n  (acc, [key, value]) => {\r\n    // @ts-expect-error\r\n    acc[key] = `var(--${key},${value})`\r\n    return acc\r\n  },\r\n  <{ [key in opacitiesPropertyNames]: `var(--${key},${number})` }>{}\r\n)\r\nexport const cssOpacityName = '--concise-syntax-opacity'\r\nexport type Opacities = Record<opacitiesPropertyNames, number>\r\n//#endregion\r\n\r\n//#region calibrate\r\nexport const calibrationFileName = 'syntax.tsx'\r\nexport const calibrate = {\r\n  bootUp: 'bootUp',\r\n  opening: 'opening',\r\n  opened: 'opened',\r\n  closed: 'closed',\r\n  idle: 'idle',\r\n  error: 'error',\r\n} as const\r\n/**\r\n * standBy     nothing   / bootUp\r\n * requesting  click     / opening\r\n * loaded      dom/click / opened\r\n * windowState nothing   / closed\r\n *\r\n * noting/bootUp > click > opening > opened > dom/click > closed > standBy\r\n */\r\nexport type Calibrate = (typeof calibrate)[keyof typeof calibrate]\r\n//#endregion\r\n\r\n//#region state\r\nexport const stateIcon = 'symbol-keyword'\r\nexport const state = {\r\n  resetDev: 'resetDev',\r\n  active: 'active',\r\n  inactive: 'inactive',\r\n  stale: 'stale',\r\n  disposed: 'disposed',\r\n  error: 'error',\r\n} as const\r\nexport type State = (typeof state)[keyof typeof state]\r\n//#endregion\r\n\r\n/**\r\n * Exploit the fact that vscode will render strings to the DOM\r\n */\r\nexport const IState = {\r\n  selector: `[id=\"${extensionId}\"]:has(.codicon-${stateIcon})`,\r\n  encode(input: { state: State; calibrate: Calibrate; opacities: Opacities }) {\r\n    const opacities = Object.entries(OpacityNames).reduce(\r\n      (acc, [key, value]) => {\r\n        // @ts-expect-error\r\n        acc[value] = input.opacities[key]\r\n        return acc\r\n      },\r\n      <Record<string, string>>{}\r\n    )\r\n    return `Concise Syntax: ${input.state},${input.calibrate},${JSON.stringify(\r\n      opacities\r\n    )}` as const\r\n  },\r\n  /**\r\n   * VSCode will reinterpret the string: \"<?icon>  <extensionName>, <?IState.encode>\"\r\n   * @param encoded\r\n   * @returns\r\n   */\r\n  decode(encoded?: string) {\r\n    if (!encoded) return {}\r\n    const regex =\r\n      /Concise Syntax: (?<state>\\w+),(?<calibrate>\\w+),(?<opacities>\\{.+\\})/\r\n    const _opacities = JSON.parse(\r\n      regex.exec(encoded)?.groups?.opacities ?? '{}'\r\n    )\r\n    return {\r\n      state: regex.exec(encoded)?.groups?.state,\r\n      calibrate: regex.exec(encoded)?.groups?.calibrate,\r\n      opacities: Object.entries(OpacityNames).reduce((acc, [key, value]) => {\r\n        // @ts-expect-error\r\n        acc[key] = _opacities[value]\r\n        return acc\r\n      }, <Record<opacitiesPropertyNames, unknown>>{}),\r\n    }\r\n  },\r\n}\r\n","export function deltaFn<F extends () => any>(consume: boolean = false) {\r\n  let delta: F | undefined\r\n  return {\r\n    consume() {\r\n      delta?.()\r\n      delta = undefined\r\n    },\r\n    get fn() {\r\n      return delta\r\n    },\r\n    set fn(value) {\r\n      // TODO: check if this won't break anything else\r\n      if (consume) this.consume()\r\n      delta = value\r\n    },\r\n  }\r\n}\r\nexport function deltaValue<T>(consume: (value: T) => void) {\r\n  let delta: T | undefined\r\n  return {\r\n    consume() {\r\n      if (delta) consume(delta)\r\n      delta = undefined\r\n    },\r\n    get value() {\r\n      return delta\r\n    },\r\n    set value(value) {\r\n      this.consume()\r\n      delta = value\r\n    },\r\n  }\r\n}\r\n\r\nexport type Task<R = unknown, E = R> = ReturnType<typeof createTask<R, E>>\r\nexport function createTask<R = unknown, E = R>() {\r\n  let resolve = (value?: R) => {},\r\n    reject = (value?: E) => {}\r\n  const promise = new Promise<R | E>((_resolve, _reject) => {\r\n    reject = _reject\r\n    // @ts-expect-error\r\n    resolve = _resolve\r\n  })\r\n  return { promise, resolve, reject }\r\n}\r\n","import * as vscode from 'vscode'\r\nimport packageJson from '../../package.json'\r\nimport {\r\n  getTextMateRules,\r\n  key,\r\n  updateSettingsCycle,\r\n  updateWriteTextMateRules,\r\n} from './settings'\r\nimport {\r\n  DefaultOpacity,\r\n  IState,\r\n  State,\r\n  calibrate,\r\n  calibrationFileName,\r\n  state,\r\n  stateIcon,\r\n  Opacities,\r\n} from 'src/shared/state'\r\nimport { Calibrate } from 'src/shared/state'\r\nimport { useGlobal, useState } from './utils'\r\nimport path from 'path'\r\nimport { Task, createTask, deltaFn, deltaValue } from 'src/shared/utils'\r\nimport { type windowColorsTable } from 'src/workbench'\r\nimport {\r\n  calibrateTimeout,\r\n  calibrateWindowCommandPlaceholder,\r\n} from 'src/workbench/keys'\r\n\r\n/**\r\n * The icon's purpose is to indicate the workbench.ts script the extension is active.\r\n */\r\nlet _item: vscode.StatusBarItem | undefined\r\nconst statusIconLoading = 'loading~spin'\r\nconst iconText = '' //' Concise'\r\nlet busy: boolean | undefined\r\nlet disposeConfiguration = deltaFn(true)\r\nlet crashedMessage = ''\r\n\r\nlet anyDocument = false\r\n\r\nlet c_busy = false\r\nlet disposeClosedEditor = deltaFn(true)\r\nlet calibrate_confirmation_task = deltaValue<Task>((t) => {\r\n  t.resolve()\r\n})\r\nlet calibrate_window_task = deltaValue<Task<Error>>((t) => {\r\n  t.resolve()\r\n})\r\n\r\nlet t_busy = false\r\nconst remoteCalibratePath = path.join(__dirname, calibrationFileName)\r\nconst uriRemote = vscode.Uri.file(remoteCalibratePath)\r\n\r\nlet w_busy = false\r\ntype EncodeInput = Parameters<typeof IState.encode>[0]\r\nlet deltaState: EncodeInput = {\r\n  state: 'inactive',\r\n  calibrate: 'bootUp',\r\n  opacities: { ...DefaultOpacity },\r\n}\r\nconst encode = (delta: Partial<EncodeInput>) => {\r\n  const input = {\r\n    state: delta.state ?? deltaState.state,\r\n    calibrate: delta.calibrate ?? deltaState.calibrate,\r\n    opacities: delta.opacities ?? deltaState.opacities,\r\n  }\r\n  return IState.encode((deltaState = input))\r\n}\r\ntype UsingContext = { stores: Stores; context: vscode.ExtensionContext }\r\ntype UsingContextItem = UsingContext & { _item: vscode.StatusBarItem }\r\n\r\nexport async function ExtensionState_statusBarItem(\r\n  context: vscode.ExtensionContext,\r\n  setState: State\r\n) {\r\n  // TODO: decouple the update from the status bar item\r\n  const stores = getStores(context)\r\n  await stores.windowState.write(setState)\r\n  const usingContext = { stores, context }\r\n  checkDisposedCommandContext(setState)\r\n\r\n  if (_item) {\r\n    await changeExtensionStateCycle(usingContext, setState)\r\n  }\r\n\r\n  // This section will be called once because you are counting on the _item to be defined\r\n  // the scope closure maintains the context\r\n\r\n  const toggleCommand = packageJson.contributes.commands[2].command\r\n  _item = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 0)\r\n  _item.command = toggleCommand\r\n\r\n  const calibrateCommand = packageJson.contributes.commands[3].command\r\n\r\n  const calibrateWIndowCommand = packageJson.contributes.commands[4].command\r\n\r\n  context.subscriptions.push(\r\n    _item,\r\n    vscode.commands.registerCommand(toggleCommand, () =>\r\n      toggleCommandCycle(usingContext)\r\n    ),\r\n    vscode.commands.registerCommand(calibrateCommand, () =>\r\n      calibrateCommandCycle(uriRemote, usingContext, _item)\r\n    ),\r\n    vscode.commands.registerCommand(calibrateWIndowCommand, () =>\r\n      calibrateWindowCommandCycle(usingContext)\r\n    ),\r\n    vscode.workspace.onDidChangeConfiguration((e) =>\r\n      changedColorThemeCycle(e, usingContext)\r\n    ),\r\n    vscode.workspace.onDidChangeConfiguration((e) =>\r\n      changedExtensionOpacitiesCycle(e, usingContext)\r\n    ),\r\n    {\r\n      dispose() {\r\n        disposeConfiguration.consume()\r\n        disposeClosedEditor.consume()\r\n        calibrate_confirmation_task.consume()\r\n      },\r\n    }\r\n  )\r\n\r\n  // the extension side doesn't need to read this but the window side does; so make sure to not fall out of sync\r\n  syncOpacities(usingContext)\r\n  // execute after registering the commands, specially calibrateWIndowCommand\r\n\r\n  const firstDocument = vscode.window.onDidChangeActiveTextEditor(async (e) => {\r\n    if (anyDocument) return\r\n    const tsx = e?.document.languageId == 'typescriptreact'\r\n    if (!tsx) return\r\n    anyDocument = true\r\n    firstDocument.dispose()\r\n    const next = setState ?? 'active'\r\n    await changeExtensionStateCycle(usingContext, next)\r\n  })\r\n  context.subscriptions.push(firstDocument)\r\n}\r\n\r\nasync function REC_windowStateSandbox(\r\n  tryNext: State,\r\n  settings: 'active' | 'inactive',\r\n  usingContext: UsingContextItem,\r\n  invalidRecursiveDiff?: RecursiveDiff\r\n) {\r\n  const { stores, context, _item } = usingContext\r\n\r\n  _item.text = `$(${statusIconLoading})` + iconText\r\n  const cache = await updateSettingsCycle(context, settings)\r\n  if (cache instanceof Error) {\r\n    await defaultWindowState(_item, state.error, stores.windowState)\r\n    return cache\r\n  }\r\n  if (typeof cache == 'function') {\r\n    if (await invalidRecursiveDiff?.(cache)) {\r\n      return 'SC: invalid recursive diff'\r\n    }\r\n    const task = createTask()\r\n    const watcher = vscode.workspace.onDidChangeConfiguration(task.resolve)\r\n    const res = await cache()\r\n    if (res instanceof Error) {\r\n      watcher.dispose()\r\n      await defaultWindowState(_item, state.error, stores.windowState)\r\n      return res\r\n    }\r\n    await Promise.race([\r\n      task.promise, // either the configuration changes or the timeout\r\n      new Promise((resolve) => setTimeout(resolve, 3000)),\r\n    ])\r\n    watcher.dispose()\r\n  }\r\n\r\n  await defaultWindowState(_item, tryNext, stores.windowState)\r\n\r\n  // prettier-ignore\r\n  if(tryNext == state.active)\r\n  disposeConfiguration.fn = vscode.workspace.onDidChangeConfiguration(async (config) => {\r\n    if (busy || !config.affectsConfiguration(key)) return\r\n    const tryNext = stores.windowState.read()\r\n    if (!tryNext) return\r\n    \r\n    const res = await REC_nextWindowStateCycle(\r\n      tryNext,\r\n      binary(tryNext),\r\n      usingContext,\r\n      async (cache) => {\r\n        if (typeof cache != 'function') return\r\n        \r\n        /**\r\n         * There is a cash waiting to be executed (invalidated)\r\n         * The recursion/watcher was called\r\n         * And the extension is active so now it will fall out of sync\r\n         * Therefor the user deserves to know the settings.json is not up to date\r\n         * It is rude to change the settings.json without the user's consent\r\n         */\r\n        if (tryNext == state.active && stores.globalInvalidation.read() != state.active) {\r\n          await defaultWindowState(_item, state.stale, stores.windowState)\r\n          const res = await vscode.window.showInformationMessage(\r\n            \"The extension settings were invalidated while the extension was running. \\\r\n              Shall we add missing extension textMateRules if any and move them to the end to avoid conflicts?\",\r\n            'Yes and remember',\r\n            'No and deactivate',\r\n          )\r\n          const next = res?.includes('Yes') ? state.active : state.inactive\r\n          await stores.globalInvalidation.write(next)\r\n\r\n          if(next == state.inactive){\r\n            await defaultWindowState(_item, next, stores.windowState)\r\n            return true\r\n          }\r\n        }\r\n        vscode.window.withProgress(\r\n          {\r\n            location: vscode.ProgressLocation.Window,\r\n            title: packageJson.displayName,\r\n          },\r\n          async (progress) => {\r\n            progress.report({ message: 'revalidating...' })\r\n            for (let i = 0; i < 5; i++) {\r\n              await hold(1_000)\r\n            }\r\n          }\r\n        )\r\n      })\r\n    \r\n    if(res ==\"SC: invalid recursive diff\" || res== \"Success: cached\" || res== \"Success: invalidated\"){}\r\n    else{\r\n\t\t\tdisposeConfiguration.consume()\r\n      return res\r\n    }\r\n  }).dispose\r\n\r\n  if (cache === true) {\r\n    return 'Success: cached'\r\n  } else {\r\n    return 'Success: invalidated'\r\n  }\r\n}\r\n\r\nasync function calibrateStateSandbox(\r\n  uriRemote: vscode.Uri,\r\n  usingContext: UsingContext,\r\n  _item: vscode.StatusBarItem\r\n) {\r\n  const { stores } = usingContext\r\n\r\n  if (stores.globalCalibration.read() != state.active) {\r\n    const res = await vscode.window.showInformationMessage(\r\n      'The Concise Syntax extension will add/remove textMateRules in .vscode/settings.json to sync up with the window state. \\\r\n      Do you want to continue?',\r\n      'Yes and remember',\r\n      'No and deactivate'\r\n    )\r\n    const next = res?.includes('Yes') ? state.active : state.inactive\r\n    await stores.globalCalibration.write(next)\r\n    checkCalibratedCommandContext(next, stores.calibrationState)\r\n\r\n    if (next == state.inactive && stores.windowState.read() != state.active) {\r\n      return 'SC: inactive globalCalibration'\r\n    }\r\n  } else {\r\n    // seems dumb but if \"globalCalibration\" is active, then \"calibrationState\" should be active too\r\n    checkCalibratedCommandContext(state.active, stores.calibrationState)\r\n  }\r\n\r\n  const taskProgress = withProgress()\r\n  calibrate_confirmation_task.value = taskProgress.task\r\n  if (!taskProgress.progress)\r\n    return new Error('taskProgress.progress is undefined')\r\n\r\n  taskProgress.progress.report({ message: 'calibrating extension' })\r\n  // update the settings before showing the calibration file and risking the user to close it while the procedure is waiting\r\n  defaultWindowState = (() => {}) as any\r\n  const stateCycle = (state: 'active' | 'inactive') =>\r\n    REC_nextWindowStateCycle(state, state, usingContext)\r\n  const res1 = await stateCycle(state.inactive)\r\n  defaultWindowState = annoyance\r\n  if (res1 instanceof Error) return res1\r\n  if (stores.windowState.read() != state.active) {\r\n    // this would be a cold start or a restart...\r\n    await defaultWindowState(_item, 'active', stores.windowState)\r\n  }\r\n\r\n  const calibrateCycle = (calibrate: Calibrate, t = 100) =>\r\n    tryUpdateCalibrateState(_item, calibrate, t)\r\n  await calibrateCycle(calibrate.opening)\r\n  const document = await vscode.workspace.openTextDocument(uriRemote)\r\n  const editor = await vscode.window.showTextDocument(document, {\r\n    preview: false,\r\n    preserveFocus: false,\r\n  })\r\n  const closeEditorTask = createTask<true>()\r\n  disposeClosedEditor.fn = onDidCloseTextDocument(async (doc) => {\r\n    if (doc.uri.path === uriRemote.path || editor.document.isClosed) {\r\n      closeEditorTask.resolve(true)\r\n      await consume_close(_item)\r\n      return true\r\n    }\r\n  })\r\n\r\n  taskProgress.progress.report({ message: 'calibrating window' })\r\n  calibrate_window_task.value = createTask()\r\n  await checkCalibrateWindowCommandContext(state.active)\r\n  await calibrateCycle(calibrate.opened, 1500)\r\n\r\n  const race = await Promise.race([\r\n    closeEditorTask.promise,\r\n    calibrate_window_task.value.promise,\r\n    new Promise<Error>((resolve) =>\r\n      setTimeout(() => {\r\n        resolve(new Error('calibrate_window_task timed out '))\r\n      }, calibrateTimeout)\r\n    ),\r\n  ])\r\n  if (race instanceof Error) return race\r\n  taskProgress.progress.report({ message: 'calibrating syntax and theme' })\r\n  const error2 = await stateCycle(state.active)\r\n  if (error2 instanceof Error) return error2\r\n\r\n  calibrate_window_task.consume()\r\n  // FIXME: the window should trigger the 'Calibrate Window' task\r\n  // take a look at src/workbench/index.ts createCalibrateSubscription's \"state == calibrate.opened\" branch\r\n  disposeClosedEditor.consume()\r\n  // await checkCalibrateWindowCommandContext(state.inactive) // FIXME: this procedure is aware is being called from calibrateStateSandbox, it should't but it does, so - the caller will make sure it will dispose the cycle\r\n  await calibrateCycle(calibrate.idle)\r\n  taskProgress.progress.report({ message: 'calibrated you may close the file' })\r\n\r\n  setTimeout(calibrate_confirmation_task.consume, 5_000)\r\n\r\n  // FIXME: this procedure and many others in this file have way to many \"dispose\" or \"consume\" calls, the cognitive load is too high\r\n  return 'Success: calibrateStateSandbox'\r\n}\r\n\r\n//#region module\r\ntype RecursiveDiff = (\r\n  cache: Awaited<ReturnType<typeof updateSettingsCycle>>\r\n) => Promise<true | undefined>\r\nasync function REC_nextWindowStateCycle(\r\n  tryNext: State,\r\n  settings: 'active' | 'inactive',\r\n  usingContext: UsingContext,\r\n  recursiveDiff?: RecursiveDiff\r\n) {\r\n  if (!_item) {\r\n    const r = 'SC: No status bar item found'\r\n    vscode.window.showErrorMessage(r)\r\n    return r\r\n  } else if (crashedMessage) {\r\n    vscode.window.showErrorMessage(\r\n      `The extension crashed when updating .vscode/settings.json with property ${key}.textMateRules with error: ${crashedMessage}`\r\n    )\r\n    return 'SC: crashed'\r\n  }\r\n  const { stores } = usingContext\r\n  if (stores.calibrationState.read() != state.active) {\r\n    await defaultWindowState(_item, state.stale, stores.windowState)\r\n    return 'SC: stale - calibrationState was not active'\r\n  }\r\n\r\n  try {\r\n    busy = true\r\n\r\n    const res = await REC_windowStateSandbox(\r\n      tryNext,\r\n      settings,\r\n      Object.assign(usingContext, { _item }),\r\n      recursiveDiff\r\n    )\r\n    if (res instanceof Error) throw res\r\n\r\n    busy = false\r\n    return res\r\n  } catch (error: any) {\r\n    debugger\r\n    busy = false\r\n    showCrashIcon(_item, error)\r\n    return error instanceof Error ? error : new Error('Unknown error')\r\n  }\r\n}\r\nfunction showCrashIcon(_item: vscode.StatusBarItem, error: any) {\r\n  crashedMessage = error?.message || 'unknown'\r\n  _item.text = `$(error)` + iconText\r\n  _item.tooltip = encode({\r\n    state: state.error,\r\n    calibrate: state.error,\r\n  })\r\n  _item.show()\r\n  disposeConfiguration.consume()\r\n}\r\nlet defaultWindowState = async function (\r\n  _item: vscode.StatusBarItem,\r\n  next: State,\r\n  windowState: Stores['windowState']\r\n) {\r\n  await windowState.write(next)\r\n  _item.text = `$(${stateIcon})` + iconText\r\n  _item.tooltip = encode({\r\n    state: next,\r\n  })\r\n  const failure =\r\n    next == state.disposed || next == state.stale || next == state.error\r\n  await hold(failure ? 1000 : 100)\r\n\r\n  if (failure) {\r\n    _item.hide()\r\n  } else {\r\n    _item.show()\r\n  }\r\n}\r\n// Prevent rare annoying flickering on editors when the workbench observers trigger their inactive states\r\n// I won't create an abstraction on top of REC_nextWindowStateCycle to handle this case because it is too specific\r\nconst annoyance = defaultWindowState\r\n\r\nasync function calibrateCommandCycle(\r\n  uriRemote: vscode.Uri,\r\n  usingContext: UsingContext,\r\n  _item: vscode.StatusBarItem | undefined\r\n) {\r\n  anyDocument = true\r\n  const { stores } = usingContext\r\n\r\n  if (stores.extensionState.read() == 'disposed') {\r\n    vscode.window.showInformationMessage(\r\n      'The extension is disposed. Mount it to use this command.'\r\n    )\r\n    return 'SC: disposed'\r\n  }\r\n  if (c_busy || busy) {\r\n    // FIXME: if any showInformationMessage you are waiting for is hidden to the notification area\r\n    // and the user wants to run this command again, the message is unclear...\r\n    vscode.window.showInformationMessage(\r\n      'The extension is busy. Try again in a few seconds.'\r\n    )\r\n    return 'SC: busy'\r\n  }\r\n  if (calibrate_window_task.value) {\r\n    vscode.window.showInformationMessage(\r\n      'The extension is busy with a window task. Try again later'\r\n    )\r\n    return 'SC: pending calibrate_window_task'\r\n  }\r\n  if (!_item) {\r\n    return 'SC: _item is undefined'\r\n  }\r\n\r\n  try {\r\n    c_busy = true\r\n\r\n    const res = await calibrateStateSandbox(uriRemote, usingContext, _item)\r\n    if (res instanceof Error) throw res\r\n    if (res == 'Success: calibrateStateSandbox') {\r\n      const theme = vscode.workspace\r\n        .getConfiguration('workbench')\r\n        ?.get('colorTheme')\r\n      if (typeof theme == 'string' && theme !== stores.colorThemeKind.read()) {\r\n        await stores.colorThemeKind.write(theme)\r\n      }\r\n    }\r\n    await checkCalibrateWindowCommandContext(state.inactive)\r\n\r\n    c_busy = false\r\n\r\n    return res\r\n  } catch (error: any) {\r\n    debugger\r\n    c_busy = false\r\n    calibrate_window_task.consume()\r\n    calibrate_confirmation_task.consume()\r\n    await checkCalibrateWindowCommandContext(state.inactive)\r\n    await consume_close(_item) // the order matters\r\n    if (_item) {\r\n      showCrashIcon(_item, error)\r\n    }\r\n    vscode.window.showErrorMessage(\r\n      `Error: failed to execute calibrate command with error: ${error?.message}`\r\n    )\r\n    return error instanceof Error ? error : new Error('Unknown error')\r\n  }\r\n}\r\nasync function calibrateWindowCommandCycle(usingContext: UsingContext) {\r\n  if (w_busy) {\r\n    vscode.window.showInformationMessage(\r\n      'The extension is busy. Try again in a few seconds.'\r\n    )\r\n    return 'SC: busy'\r\n  }\r\n  checkCalibrateWindowCommandContext(state.inactive)\r\n  w_busy = true\r\n\r\n  const task = createTask<Error>()\r\n  const blurEvent = vscode.window.onDidChangeWindowState((state) => {\r\n    vscode.window.showInformationMessage(\r\n      `window focus changed to ${state.focused}`\r\n    )\r\n    if (state.focused === false) {\r\n      task.resolve(\r\n        new Error('Window lost focus, calibrate window task was cancelled')\r\n      )\r\n    }\r\n  })\r\n  const input = vscode.window.showInputBox({\r\n    placeHolder: calibrateWindowCommandPlaceholder,\r\n    prompt: `Calibrate Window using session's syntax and theme`,\r\n    value: '',\r\n  })\r\n  const race = await Promise.race([task.promise, input])\r\n  blurEvent.dispose()\r\n  if (!calibrate_window_task.value) {\r\n    return 'SC: calibrate_window_task is undefined'\r\n  }\r\n  if (race instanceof Error) {\r\n    calibrate_window_task.value.reject(race)\r\n    return 'SC: reject - window lost focus'\r\n  }\r\n  if (!race) {\r\n    calibrate_window_task.value.reject(\r\n      new Error('No window input was provided')\r\n    )\r\n    return 'SC: reject - no window input'\r\n  }\r\n  try {\r\n    const table: windowColorsTable = JSON.parse(race)\r\n    // panic on a random missing color\r\n    table['string.begin'].color!.toString()\r\n\r\n    await updateWriteTextMateRules(\r\n      usingContext.context,\r\n      (textMateRules, nameSuffix) => {\r\n        const len = textMateRules.length\r\n        for (let i = 0; i < len; i++) {\r\n          const value = textMateRules[i]\r\n          // @ts-expect-error\r\n          const tableValue = table[value.name.replace(nameSuffix, '')]\r\n          if (tableValue && tableValue.color) {\r\n            // prettier-ignore\r\n            const divergence = ((i / len) / len) + .9\r\n            // the window script function \"parseSymbolColors\" depends on unique colors\r\n            value.settings.foreground =\r\n              rgbToHexDivergent(tableValue.color, divergence) ??\r\n              value.settings.foreground\r\n          }\r\n        }\r\n        const begin = textMateRules.find((r) =>\r\n          r.name.includes('bracket.begin')\r\n        )\r\n        const end = textMateRules.find((r) => r.name.includes('bracket.end'))\r\n        if (begin && end) {\r\n          end.settings.foreground = begin.settings.foreground\r\n        }\r\n      }\r\n    )\r\n\r\n    calibrate_window_task.value.resolve()\r\n    return 'Success: resolved calibrate_window_task'\r\n  } catch (error: any) {\r\n    const r =\r\n      `Failed to parse window input with error: ${error?.message}` as const\r\n    vscode.window.showErrorMessage(r)\r\n    calibrate_window_task.value?.reject(new Error(r))\r\n    return r\r\n  }\r\n}\r\nfunction rgbToHexDivergent(rgbString: string, scalar = 1) {\r\n  const cleanedString = rgbString.replace(/\\s/g, '').toLowerCase()\r\n  const isRgba = cleanedString.includes('rgba')\r\n  const values = cleanedString.match(/\\d+(\\.\\d+)?/g)\r\n  if (values && (isRgba ? values.length === 4 : values.length === 3)) {\r\n    const hexValues = values.map((value, index) => {\r\n      const intValue = parseFloat(value)\r\n      const scaledValue = Math.min(255, Math.round(intValue * scalar))\r\n      const hex = scaledValue.toString(16).padStart(2, '0')\r\n      return index < 3 ? hex : scaledValue.toString(16).padStart(2, '0')\r\n    })\r\n    return `#${hexValues.join('')}`\r\n  } else {\r\n    vscode.window.showErrorMessage(`Failed to parse rbg to hex: ${rgbString}`)\r\n    return null\r\n  }\r\n}\r\n\r\nasync function toggleCommandCycle(usingContext: UsingContext) {\r\n  anyDocument = true\r\n  const { stores } = usingContext\r\n\r\n  if (stores.extensionState.read() == 'disposed') {\r\n    vscode.window.showInformationMessage(\r\n      'The extension is disposed. Mount it to use this command.'\r\n    )\r\n    return 'SC: disposed'\r\n  }\r\n\r\n  const next = flip(stores.windowState.read())\r\n  return await changeExtensionStateCycle(usingContext, next)\r\n}\r\n\r\nfunction consume_close(_item: vscode.StatusBarItem, t = 100) {\r\n  disposeClosedEditor.consume()\r\n  return tryUpdateCalibrateState(_item, calibrate.closed, t)\r\n}\r\nfunction tryUpdateCalibrateState(\r\n  _item: vscode.StatusBarItem,\r\n  calibrate: Calibrate,\r\n  t = 100\r\n) {\r\n  _item.tooltip = encode({\r\n    calibrate,\r\n  })\r\n\r\n  return hold(t)\r\n}\r\n\r\nasync function checkCalibratedCommandContext(\r\n  next: State,\r\n  calibrationState: Stores['calibrationState']\r\n) {\r\n  vscode.commands.executeCommand(\r\n    'setContext',\r\n    'extension.calibrated',\r\n    next == state.active\r\n  )\r\n  // https://stackoverflow.com/a/74468400\r\n  await calibrationState.write(next)\r\n}\r\n\r\nlet waitingForUserInput = false\r\nasync function changeExtensionStateCycle(\r\n  usingContext: UsingContext,\r\n  overloadedNextState: State\r\n) {\r\n  anyDocument = true\r\n  const { stores } = usingContext\r\n\r\n  const theme = vscode.workspace\r\n    .getConfiguration('workbench')\r\n    ?.get('colorTheme')\r\n  if (typeof theme != 'string') {\r\n    // vscode.window.showInformationMessage(\r\n    //   `Can't change the color theme because the kind is not a number`\r\n    // )\r\n    return 'SC: theme is not a string'\r\n  }\r\n  if (busy || c_busy) {\r\n    if (waitingForUserInput)\r\n      vscode.window.showInformationMessage(\r\n        'The extension is busy. Try again in a few seconds.'\r\n      )\r\n    return 'SC: busy'\r\n  }\r\n  if (t_busy) {\r\n    if (waitingForUserInput)\r\n      vscode.window.showWarningMessage(\r\n        `The extension is busy changing the color theme...`\r\n      )\r\n    return 'SC: t_busy'\r\n  }\r\n\r\n  t_busy = true\r\n\r\n  // Happy path\r\n  if (\r\n    stores.globalCalibration.read() == state.active &&\r\n    stores.calibrationState.read() == state.active &&\r\n    stores.colorThemeKind.read() == theme\r\n  ) {\r\n    const res = await REC_nextWindowStateCycle(\r\n      overloadedNextState,\r\n      binary(overloadedNextState),\r\n      usingContext\r\n    )\r\n    t_busy = false\r\n    if (res == 'Success: cached' || res == 'Success: invalidated') {\r\n      return 'Success: overloadedNextState'\r\n    } else {\r\n      return res\r\n    }\r\n  } else {\r\n    if (_item) {\r\n      await defaultWindowState(_item, state.stale, stores.windowState)\r\n    }\r\n    waitingForUserInput = true\r\n    let info: string\r\n    if (stores.globalCalibration.read() != state.active) {\r\n      info = 'The extension is not calibrated.'\r\n    } else if (stores.calibrationState.read() != state.active) {\r\n      info = 'The extension (workspace) is not calibrated.'\r\n    } else {\r\n      info = 'The color theme changed.'\r\n    }\r\n    // NOTE: it seems like the extension holds the entire client thread\r\n    // if you await on the \"vscode export activate hook\"\r\n    // right now the state is controlled by guard clauses.\r\n    // so entering this branch multiple times should be impossible\r\n    const res = vscode.window\r\n      .showInformationMessage(\r\n        info + ' Shall we calibrate it?',\r\n        'Yes',\r\n        'No and deactivate'\r\n      )\r\n      .then(async (res) => {\r\n        waitingForUserInput = false\r\n        const next = res?.includes('Yes') ? state.active : state.inactive\r\n        if (next == state.inactive) {\r\n          if (_item) {\r\n            await defaultWindowState(_item, next, stores.windowState)\r\n          }\r\n          t_busy = false\r\n          return 'SC: deactivate'\r\n        }\r\n        return vscode.commands\r\n          .executeCommand('extension.calibrate')\r\n          .then(() => {\r\n            t_busy = false\r\n            return 'Executed: extension.calibrate command' as const\r\n          })\r\n      })\r\n    return 'Deferred: waitingForUserInput'\r\n  }\r\n}\r\n\r\nfunction changedColorThemeCycle(\r\n  e: vscode.ConfigurationChangeEvent,\r\n  usingContext: UsingContext\r\n) {\r\n  const { stores } = usingContext\r\n  if (\r\n    !anyDocument ||\r\n    stores.calibrationState.read() != state.active ||\r\n    stores.colorThemeKind.read() == undefined\r\n  )\r\n    return\r\n  if (e.affectsConfiguration('workbench.colorTheme')) return 'SC: no change'\r\n  const tryNext = stores.windowState.read()\r\n  if (tryNext != state.active) {\r\n    return 'SC: windowState is not active'\r\n  }\r\n  if (stores.calibrationState.read() != state.active) {\r\n    return 'SC: calibrationState is not active'\r\n  }\r\n  return changeExtensionStateCycle(usingContext, tryNext)\r\n}\r\n\r\nasync function changedExtensionOpacitiesCycle(\r\n  e: vscode.ConfigurationChangeEvent,\r\n  usingContext: UsingContext\r\n) {\r\n  if (!e.affectsConfiguration('concise-syntax')) return 'SC: no change'\r\n  return syncOpacities(usingContext)\r\n}\r\nasync function syncOpacities(usingContext: UsingContext) {\r\n  if (!_item) {\r\n    return 'SC: _item is undefined'\r\n  }\r\n  const opacities = await vscode.workspace.getConfiguration('concise-syntax')\r\n  if (!opacities || typeof opacities != 'object')\r\n    return 'SC: opacities is not an object'\r\n\r\n  _item.tooltip = encode({\r\n    opacities: await usingContext.stores.opacities.write({\r\n      ...deltaState.opacities,\r\n      ...opacities,\r\n    }),\r\n  })\r\n\r\n  return 'Success: opacities'\r\n}\r\n\r\nfunction getStores(context: vscode.ExtensionContext) {\r\n  return {\r\n    extensionState: getStateStore(context),\r\n    windowState: getWindowState(context),\r\n    globalInvalidation: getGlobalAnyInvalidate(context),\r\n    globalCalibration: getGlobalAnyCalibrate(context),\r\n    calibrationState: getAnyCalibrate(context),\r\n    textMateRules: getTextMateRules(context),\r\n    colorThemeKind: getColorThemeKind(context),\r\n    opacities: getOpacities(context),\r\n  }\r\n}\r\n\r\ntype Stores = ReturnType<typeof getStores>\r\n\r\nexport async function wipeAllState(context: vscode.ExtensionContext) {\r\n  await updateSettingsCycle(context, state.inactive)\r\n  const states = getStores(context)\r\n  if (_item) {\r\n    await defaultWindowState(_item, state.resetDev, states.windowState)\r\n  }\r\n  // TODO: find a way to batch reset to default\r\n  for (const key of Object.keys(DefaultOpacity)) {\r\n    await vscode.workspace\r\n      .getConfiguration('concise-syntax')\r\n      .update(key, undefined, vscode.ConfigurationTarget.Global)\r\n  }\r\n  for (const iterator of Object.values(states)) {\r\n    await iterator.write(undefined as any)\r\n  }\r\n  return context\r\n}\r\n\r\nfunction withProgress() {\r\n  const task = createTask()\r\n  let _progress: vscode.Progress<{ message?: string }> | undefined\r\n\r\n  vscode.window.withProgress(\r\n    {\r\n      location: vscode.ProgressLocation.Window,\r\n      title: packageJson.displayName,\r\n    },\r\n    async (progress, token) => {\r\n      _progress = progress\r\n      await task.promise\r\n    }\r\n  )\r\n  return {\r\n    task,\r\n    get progress() {\r\n      return _progress\r\n    },\r\n  }\r\n}\r\n\r\nexport function checkDisposedCommandContext(next?: State) {\r\n  vscode.commands.executeCommand(\r\n    'setContext',\r\n    'extension.disposed',\r\n    next == state.disposed\r\n  )\r\n  vscode.commands.executeCommand(\r\n    'setContext',\r\n    'extension.running',\r\n    next == state.active || next == state.inactive\r\n  )\r\n}\r\nasync function checkCalibrateWindowCommandContext(next: State) {\r\n  w_busy = next != state.active\r\n  await vscode.commands.executeCommand(\r\n    'setContext',\r\n    'extension.calibrateWindow',\r\n    next == state.active\r\n  )\r\n}\r\n\r\nfunction onDidCloseTextDocument(\r\n  tryClose: (doc: { uri: { path: string } }) => Promise<boolean | undefined>\r\n) {\r\n  // https://github.com/microsoft/vscode/issues/102737#issuecomment-660208607\r\n  // prettier-ignore\r\n  return (vscode.window as any).tabGroups?.onDidChangeTabs?.(async (changedEvent:any) => {\r\n    for (const doc of Array.from(changedEvent.closed)) {\r\n      if (await tryClose((doc as any).input)) {\r\n        return\r\n      }\r\n    }\r\n  })?.dispose || \r\n  // this is delayed by 4-5 minutes, so it's not reliable\r\n  vscode.workspace.onDidCloseTextDocument(async (doc) => {\r\n    if (await tryClose(doc)) {\r\n      // noop\r\n    } else{\r\n      // sometimes the callback decides to not work :D\r\n      for (const editor of vscode.window.visibleTextEditors) {\r\n        if (await tryClose(editor.document)) {\r\n          return\r\n        }\r\n      }\r\n    }\r\n  }).dispose\r\n}\r\n\r\nexport function binary(state?: State) {\r\n  return state == 'active' ? 'active' : 'inactive'\r\n}\r\nfunction flip(next?: State) {\r\n  return next == 'active' ? 'inactive' : 'active'\r\n}\r\n\r\nexport function getOpacities(context: vscode.ExtensionContext) {\r\n  return useState(context, 'opacities', <Opacities>DefaultOpacity)\r\n}\r\nexport function getColorThemeKind(context: vscode.ExtensionContext) {\r\n  return useState(context, 'colorThemeKind', <string>{})\r\n}\r\nexport function getAnyCalibrate(context: vscode.ExtensionContext) {\r\n  return useState(context, 'calibrate', <State>{})\r\n}\r\nexport function getGlobalAnyCalibrate(context: vscode.ExtensionContext) {\r\n  return useGlobal(context, 'calibrate', <State>{})\r\n}\r\nexport function getGlobalAnyInvalidate(context: vscode.ExtensionContext) {\r\n  return useGlobal(context, 'invalidate', <State>{})\r\n}\r\nexport function getWindowState(context: vscode.ExtensionContext) {\r\n  return useState(context, 'window', <State>{})\r\n}\r\nexport function getStateStore(context: vscode.ExtensionContext) {\r\n  return useState(context, 'extension', <'active' | 'inactive' | 'disposed'>{})\r\n}\r\nexport function getErrorStore(context: vscode.ExtensionContext) {\r\n  return useState(context, 'error', <'error' | 'throw' | 'unhandled'>{})\r\n}\r\n\r\n// hold this thread and allow the dom to render the state\r\nfunction hold(t = 100) {\r\n  return new Promise((resolve) => setTimeout(resolve, t))\r\n}\r\n\r\n//#endregion\r\n","import path from 'path'\r\nimport {\r\n  extensionId,\r\n  patchWorkbench,\r\n  extensionScriptTag,\r\n  preRead,\r\n} from 'src/shared/write'\r\nimport { _catch } from './utils'\r\nimport * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport msg from '../shared/messages'\r\n\r\nexport async function installCycle(context: vscode.ExtensionContext) {\r\n  const res = await read()\r\n  if (res.wasActive) {\r\n    return res.wasActive\r\n  }\r\n\r\n  let remoteWorkbenchPath\r\n  let ext = vscode.extensions.getExtension(extensionId)\r\n  if (ext && ext.extensionPath) {\r\n    remoteWorkbenchPath = path.resolve(ext.extensionPath, 'out/workbench.js')\r\n  } else {\r\n    remoteWorkbenchPath = path.resolve(__dirname, 'index.js')\r\n  }\r\n  await patchWorkbench(res, remoteWorkbenchPath)\r\n}\r\n\r\nexport async function uninstallCycle(context: vscode.ExtensionContext) {\r\n  const { html, wasActive, workbench } = await read()\r\n  if (wasActive) {\r\n    const newHtml = html.replaceAll(extensionScriptTag(), '')\r\n    await fs.promises.writeFile(workbench.path, newHtml, 'utf-8')\r\n  }\r\n  await fs.promises.unlink(workbench.customPath).catch(_catch)\r\n\r\n  return wasActive\r\n}\r\n// how do you make javascript freak out about promises/errors?\r\nexport function deactivateCycle() {\r\n  // FIXME: why is this hook not working? :(\r\n  console.log('vscode-concise-syntax is deactivated!')\r\n}\r\nexport async function read() {\r\n  if (!require.main?.filename) {\r\n    vscode.window.showErrorMessage(msg.internalError + 'no main filename')\r\n    throw new Error('no main filename')\r\n  }\r\n  const appDir = path.dirname(require.main.filename)\r\n  const base = path.join(appDir, 'vs', 'code', 'electron-sandbox', 'workbench')\r\n  return await preRead(base)\r\n}\r\n","import * as vscode from 'vscode'\r\nimport msg from '../shared/messages'\r\nimport packageJson from '../../package.json'\r\nimport { extensionId } from '../shared/write'\r\nimport { _catch } from './utils'\r\nimport {\r\n  getErrorStore,\r\n  getStateStore,\r\n  ExtensionState_statusBarItem,\r\n  getWindowState,\r\n  binary,\r\n  checkDisposedCommandContext,\r\n  wipeAllState,\r\n} from './statusBarItem'\r\nimport { installCycle, read, uninstallCycle } from './extensionCycle'\r\nimport { state } from '../shared/state'\r\nexport { deactivateCycle as deactivate } from './extensionCycle'\r\n\r\nexport async function activate(context: vscode.ExtensionContext) {\r\n  // return wipeAllState(context).then(uninstallCycle)\r\n\r\n  const resetCommand = packageJson.contributes.commands[5].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(resetCommand, () =>\r\n      wipeAllState(context)\r\n        .then(uninstallCycle)\r\n        .then(() =>\r\n          vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n        )\r\n    )\r\n  )\r\n\r\n  const extensionState = getStateStore(context) // why do I need two active states?\r\n\r\n  // FIXME: use a better state manager or state machine\r\n  const { wasActive } = await read()\r\n\r\n  const reloadCommand = packageJson.contributes.commands[0].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(reloadCommand, async () => {\r\n      try {\r\n        if (extensionState.read() == state.active) {\r\n          vscode.window.showInformationMessage('Already Mounted')\r\n        } else {\r\n          await uninstallCycle(context)\r\n          await installCycle(context)\r\n\r\n          if (!wasActive) {\r\n            await extensionState.write(state.inactive)\r\n            reloadWindowMessage(msg.enabled)\r\n          } else {\r\n            await extensionState.write(state.active)\r\n            await ExtensionState_statusBarItem(context, state.active)\r\n            vscode.window.showInformationMessage('Mount: using cache')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      }\r\n    })\r\n  )\r\n  const disposeCommand = packageJson.contributes.commands[1].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(disposeCommand, async () => {\r\n      try {\r\n        const wasActive = await uninstallCycle(context)\r\n        await extensionState.write(state.disposed)\r\n        await ExtensionState_statusBarItem(context, state.disposed)\r\n\r\n        const [message, ...options] = wasActive\r\n          ? ['Disposed', 'Reload', 'Uninstall']\r\n          : ['Already Disposed', 'Uninstall']\r\n        // prettier-ignore\r\n        const selection = await vscode.window.showInformationMessage(message, ...options)\r\n\r\n        if (selection == 'Reload') {\r\n          vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n        } else if (selection == 'Uninstall') {\r\n          vscode.commands.executeCommand(\r\n            'workbench.extensions.action.uninstallExtension',\r\n            extensionId\r\n          )\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      }\r\n    })\r\n  )\r\n\r\n  try {\r\n    const previousExtensionState = extensionState.read()\r\n    // FIXME: get me out of here\r\n    checkDisposedCommandContext(previousExtensionState)\r\n\r\n    if (previousExtensionState != state.disposed) {\r\n      const isActive = await installCycle(context)\r\n      await extensionState.write(state.active)\r\n\r\n      if (!wasActive) {\r\n        reloadWindowMessage(msg.enabled)\r\n      } else {\r\n        const windowState =\r\n          previousExtensionState == state.inactive && isActive\r\n            ? state.active\r\n            : binary(getWindowState(context).read() ?? state.active)\r\n        await ExtensionState_statusBarItem(context, windowState)\r\n      }\r\n    }\r\n  } catch (error) {\r\n    __catch(error)\r\n  }\r\n\r\n  console.log('vscode-concise-syntax is active')\r\n\r\n  function __catch(e: unknown) {\r\n    console.error(e)\r\n    const error = getErrorStore(context)\r\n    error.write('unhandled')\r\n  }\r\n}\r\n\r\nfunction reloadWindowMessage(message: string) {\r\n  vscode.window\r\n    .showInformationMessage(message, { title: msg.restartIde })\r\n    .then((selection) => {\r\n      if (selection) {\r\n        vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n      }\r\n    })\r\n}\r\n"],"names":["extensionId","key","type","i","vscode","fs","_item","tryNext","cache","res","uriRemote","state","calibrate","wasActive"],"mappings":"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"}