{"version":3,"file":"extension.js","sources":["../src/shared/messages.ts","../src/workbench/keys.ts","../src/shared/write.ts","../src/extension/settings.ts","../src/shared/state.ts","../src/extension/utils.ts","../src/shared/utils.ts","../src/extension/statusBarItem.ts","../src/extension/extensionCycle.ts","../src/extension/index.ts"],"sourcesContent":["export default {\r\n  admin: 'Run VS Code with admin privileges so the changes can be applied.',\r\n  enabled: 'Concise syntax enabled. Restart to take effect. ',\r\n  disabled:\r\n    'Concise syntax disabled and reverted to default. Restart to take effect.',\r\n  already_disabled: 'Concise syntax already disabled.',\r\n  somethingWrong: 'Something went wrong: ',\r\n  internalError: 'Internal error: ',\r\n  restartIde: 'Restart Visual Studio Code',\r\n  notfound: 'Concise syntax not found.',\r\n  notConfigured: 'Concise syntax path not configured.',\r\n  reloadAfterVersionUpgrade:\r\n    'Detected reloading Concise syntax after VSCode is upgraded. ' +\r\n    'Performing application only.',\r\n  cannotLoad: (url: string) => `Cannot load '${url}'. Skipping.` as const,\r\n} as const\r\n","export const extensionId = 'kauderk.concise-syntax'\r\nexport const windowId = 'window.' + extensionId\r\n// exploit the fact that vscode renders data to the dom, could be any other attribute\r\nexport const bridgeBetweenVscodeExtension = 'aria-label'\r\nexport const customCSS = `\r\n\t.view-lines {\r\n\t\t--r: transparent;\r\n\t}\r\n\t.view-lines:has(.dummy:hover) {\r\n\t\t--r: red;\r\n\t}\r\n\t.dummy {\r\n\t\tcolor: var(--r);\r\n\t}\r\n\t`\r\n\r\nexport const editorSelector = '.editor-instance'\r\nexport const idSelector = '[data-mode-id=\"typescriptreact\"]'\r\nexport const viewLinesSelector = '.view-lines.monaco-mouse-cursor-text'\r\nexport const linesSelector = idSelector + ` ` + viewLinesSelector\r\nexport const overlaySelector = '.view-overlays'\r\nexport const highlightSelector = idSelector + ` ` + overlaySelector\r\nexport const selectedSelector = '.selected-text'\r\nexport const currentSelector = '.current-line'\r\nexport const languages = ['typescriptreact', 'javascriptreact']\r\nexport const splitViewContainerSelector = '.split-view-container'\r\n","import fs from 'fs'\r\nimport path from 'path'\r\nimport packageJson from '../../package.json'\r\n\r\n// FIXME: find a way to compile only the properties that are being used\r\nexport { extensionId } from '../workbench/keys'\r\nimport { extensionId } from '../workbench/keys'\r\nexport const extensionScriptSrc = extensionId + '.js'\r\nexport const extensionScriptTag = () =>\r\n  new RegExp(\r\n    `<script.+${extensionId.replaceAll('.', '\\\\.')}.+\\/script>`,\r\n    'gm' // intermittently\r\n  )\r\n\r\nexport async function patchWorkbench(\r\n  res: Awaited<ReturnType<typeof preRead>>,\r\n  remoteWorkbenchPath: string\r\n) {\r\n  await fs.promises.copyFile(remoteWorkbenchPath, res.workbench.customPath)\r\n\r\n  const hash = ('' + Math.random()).substring(2, 7)\r\n  const newHtml = res.html\r\n    .replaceAll(extensionScriptTag(), '')\r\n    .replace(\r\n      /(<\\/html>)/,\r\n      `<script src=\"${extensionScriptSrc}?${hash}\"></script>` + '</html>'\r\n    )\r\n\r\n  await fs.promises.writeFile(res.workbench.path, newHtml, 'utf-8')\r\n}\r\nexport async function preRead(base: string) {\r\n  const workbenchPath = path.join(base, 'workbench.html')\r\n  const html = await fs.promises.readFile(workbenchPath, 'utf-8')\r\n  const wasActive = html.match(extensionScriptTag())\r\n  return {\r\n    html,\r\n    wasActive,\r\n    workbench: {\r\n      path: workbenchPath,\r\n      customPath: path.join(base, extensionScriptSrc),\r\n    },\r\n  }\r\n}\r\n","import * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport { _catch } from './utils'\r\nimport JSONC from 'comment-json'\r\nimport { extensionId } from 'src/workbench/keys'\r\n\r\nexport const key = 'editor.tokenColorCustomizations'\r\nconst name = `${extensionId}.`\r\nconst textMateRules = [\r\n  {\r\n    name: name + 'text',\r\n    scope: ['meta.jsx.children.tsx'],\r\n    settings: {\r\n      foreground: '#b5a70000',\r\n    },\r\n  },\r\n  {\r\n    name: name + 'redundant',\r\n    scope: [\r\n      'punctuation.definition.tag.begin.tsx',\r\n      'punctuation.definition.tag.end.tsx',\r\n      'punctuation.section.embedded.begin.tsx',\r\n      'punctuation.section.embedded.end.tsx',\r\n      'punctuation.terminator.statement.tsx',\r\n      'concise.redundant-syntax',\r\n    ],\r\n    settings: {\r\n      foreground: '#00b51b00',\r\n    },\r\n  },\r\n  {\r\n    name: name + 'quote.begin',\r\n    scope: [\r\n      'punctuation.definition.string.begin.tsx',\r\n      'punctuation.definition.string.template.begin.tsx',\r\n    ],\r\n    settings: {\r\n      foreground: '#b5a90000',\r\n    },\r\n  },\r\n  {\r\n    name: name + 'quote.end',\r\n    scope: [\r\n      'punctuation.definition.string.end.tsx',\r\n      'punctuation.definition.string.template.end.tsx',\r\n    ],\r\n    settings: {\r\n      foreground: '#b5030000',\r\n    },\r\n  },\r\n  {\r\n    name: name + 'separator',\r\n    scope: ['punctuation.separator.comma.tsx'],\r\n    settings: {\r\n      foreground: '#b5080000',\r\n    },\r\n  },\r\n]\r\nconst settingsJsonPath = '.vscode/settings.json'\r\nconst remoteSettingsJsonPath = 'remote.settings.jsonc'\r\n\r\n// TODO: avoid writing defensive code, someone else surely knows a better way to do this\r\nexport async function updateSettingsCycle(\r\n  context: vscode.ExtensionContext,\r\n  operation: 'inactive' | 'active'\r\n) {\r\n  const res = await tryParseSettings()\r\n  if (!res) return\r\n  const { wasEmpty, specialObjectUserRules: userRules } = res\r\n\r\n  // could be more elegant...\r\n  // this has to be faster than writing the file every time, otherwise it's not worth it\r\n  let diff = false\r\n  if (operation == 'active') {\r\n    if (wasEmpty) {\r\n      diff = true\r\n      userRules.push(...textMateRules)\r\n    } else {\r\n      const userIndexToNameMap = new Map(userRules.map((r, i) => [r?.name, i]))\r\n\r\n      for (const presetRule of textMateRules) {\r\n        const i = userIndexToNameMap.get(presetRule.name) ?? -1\r\n        if (i > -1) {\r\n          const userRule = userRules[i]\r\n          if (!userRule) {\r\n            userRules[i] = presetRule\r\n            diff = true\r\n            continue\r\n          }\r\n\r\n          if (presetRule.scope.some((s, i) => s !== userRule.scope?.[i])) {\r\n            userRule.scope = presetRule.scope\r\n            diff = true\r\n          }\r\n          // prettier-ignore\r\n          if (userRule.settings?.foreground!== presetRule.settings.foreground) {\r\n\t\t\t\t\t\tuserRule.settings ??= {}\r\n            userRule.settings.foreground = presetRule.settings.foreground\r\n            diff = true\r\n          }\r\n        } else {\r\n          userRules.push(presetRule)\r\n          diff = true\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    if (wasEmpty) {\r\n      diff = false\r\n      return\r\n    } else {\r\n      const indexToNameMap = new Map(textMateRules.map((r, i) => [r.name, i]))\r\n      for (let i = userRules.length - 1; i >= 0; i--) {\r\n        const j = indexToNameMap.get(userRules[i]?.name!)!\r\n        if (j > -1) {\r\n          diff = true\r\n          userRules.splice(i, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // sort by textMateRules and put them at the end of userRules\r\n  // send it to the end of the array\r\n  ;[...textMateRules].reverse().forEach((r, relative, _arr) => {\r\n    const index = userRules.findIndex((_r) => _r?.name == r.name)\r\n    if (index < 0) return\r\n    const end = userRules.length - 1 - relative\r\n    if (index != end) {\r\n      diff = true\r\n      move(userRules, index, end)\r\n    }\r\n  })\r\n\r\n  if (!diff) {\r\n    return true\r\n  }\r\n\r\n  return res.write\r\n}\r\n\r\nasync function tryParseSettings() {\r\n  const workspace = vscode.workspace.workspaceFolders?.[0].uri\r\n  if (!workspace) {\r\n    vscode.window.showErrorMessage(\r\n      'No workspace found: cannot update textMateRules'\r\n    )\r\n    return\r\n  }\r\n\r\n  const userSettingsPath = workspace.fsPath + '/' + settingsJsonPath\r\n\r\n  let raw_json: string | undefined\r\n  let config: any\r\n  try {\r\n    raw_json = await fs.promises.readFile(userSettingsPath, 'utf-8')\r\n    config = JSONC.parse(raw_json)\r\n  } catch (error) {\r\n    config ??= {}\r\n    console.error(error)\r\n  }\r\n\r\n  if (raw_json === undefined) {\r\n    vscode.window.showErrorMessage(\r\n      `Cannot read ${settingsJsonPath}: does not exist or is not valid JSON`\r\n    )\r\n    return\r\n  }\r\n\r\n  // NOTE: This is a special object https://www.npmjs.com/package/comment-json#commentarray\r\n  let userRules: DeepPartial<typeof textMateRules> | undefined =\r\n    config?.[key]?.textMateRules\r\n\r\n  if (userRules && !Array.isArray(userRules)) {\r\n    vscode.window.showErrorMessage(\r\n      `${settingsJsonPath}: ${key}.textMateRules is not an array`\r\n    )\r\n    return\r\n  }\r\n\r\n  const wasEmpty = !userRules || userRules?.length == 0\r\n  if (!userRules) {\r\n    userRules = []\r\n    config[key] = { textMateRules: userRules }\r\n  }\r\n  return {\r\n    specialObjectUserRules: userRules,\r\n    wasEmpty,\r\n    async write() {\r\n      try {\r\n        if (raw_json === undefined) throw new Error('raw_json is undefined')\r\n        const indent = raw_json.match(/^\\s+/)?.[0] ?? '  '\r\n        const virtualJson = JSONC.stringify(config, null, indent)\r\n        if (virtualJson === raw_json) return\r\n        await fs.promises.writeFile(userSettingsPath, virtualJson, 'utf-8')\r\n      } catch (error: any) {\r\n        vscode.window.showErrorMessage(\r\n          'Failed to write textMateRules. Error: ' + error.message\r\n        )\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\ntype DeepPartial<T> = T extends object\r\n  ? {\r\n      [P in keyof T]?: DeepPartial<T[P]>\r\n    }\r\n  : T\r\nfunction move(arr: any[], fromIndex: number, toIndex: number) {\r\n  var element = arr[fromIndex]\r\n  arr.splice(fromIndex, 1)\r\n  arr.splice(toIndex, 0, element)\r\n}\r\n","import { extensionId } from '../workbench/keys'\r\n\r\nexport const stateIcon = 'symbol-keyword'\r\nexport const state = {\r\n  active: 'active',\r\n  inactive: 'inactive',\r\n  stale: 'stale',\r\n  disposed: 'disposed',\r\n  error: 'error',\r\n} as const\r\nexport type State = (typeof state)[keyof typeof state]\r\n/**\r\n * Exploit the fact that vscode will render strings to the DOM\r\n */\r\nexport const IState = {\r\n  selector: iconSelector(stateIcon),\r\n  encode(state: State) {\r\n    return `Concise Syntax: ${state}` as const\r\n  },\r\n  /**\r\n   * VSCode will reinterpret the string: \"<?icon>  <extensionName>, <?IState.encode>\"\r\n   * @param string\r\n   * @returns\r\n   */\r\n  decode(string?: string) {\r\n    return Object.values(state)\r\n      .reverse()\r\n      .find((state) => string?.includes(state))\r\n  },\r\n}\r\n\r\nexport const calibrateIcon = 'go-to-file'\r\nexport const calibrationFileName = 'syntax.tsx'\r\nexport const calibrate = {\r\n  opening: 'opening',\r\n  opened: 'opened',\r\n  closed: 'closed',\r\n  error: 'error',\r\n} as const\r\n/**\r\n * standBy     nothing   / bootUp\r\n * requesting  click     / opening\r\n * loaded      dom/click / opened\r\n * windowState nothing   / closed\r\n *\r\n * noting/bootUp > click > opening > opened > dom/click > closed > standBy\r\n */\r\nexport type Calibrate = (typeof calibrate)[keyof typeof calibrate]\r\n/**\r\n * Exploit the fact that vscode will render strings to the DOM\r\n */\r\nexport const ICalibrate = {\r\n  selector: iconSelector(calibrateIcon),\r\n  encode(state: Calibrate) {\r\n    return `Concise Syntax (calibrate): ${state}` as const\r\n  },\r\n  /**\r\n   * VSCode will reinterpret the string: \"<?icon>  <extensionName>, <?IState.encode>\"\r\n   * @param string\r\n   * @returns\r\n   */\r\n  decode(string?: string) {\r\n    return Object.values(calibrate)\r\n      .reverse()\r\n      .find((state) => string?.includes(state))\r\n  },\r\n}\r\n\r\nfunction iconSelector(icon: string) {\r\n  return `[id=\"${extensionId}\"]:has(.codicon-${icon})` as const\r\n}\r\n","import { extensionId } from 'src/workbench/keys'\r\nimport * as vscode from 'vscode'\r\n\r\n// FIXME: handle the errors where it is being used\r\nexport function _catch(e: unknown) {}\r\n\r\nexport function useState<S extends string, T extends string>(\r\n  context: vscode.ExtensionContext,\r\n  key: S,\r\n  type: T // I don't like weaning my type hat\r\n) {\r\n  const _key = `${extensionId}.workspace.${key}` as const\r\n  return {\r\n    key: _key,\r\n    value: <T | undefined>undefined,\r\n    read() {\r\n      return (this.value = context.workspaceState.get(_key))\r\n    },\r\n    async write(newState: T) {\r\n      this.value = newState\r\n      await context.workspaceState.update(_key, newState)\r\n      return newState\r\n    },\r\n  }\r\n}\r\nexport function useGlobal<S extends string, T extends string>(\r\n  context: vscode.ExtensionContext,\r\n  key: S,\r\n  type: T // I don't like weaning my type hat\r\n) {\r\n  const _key = `${extensionId}.global.${key}` as const\r\n  return {\r\n    key: _key,\r\n    value: <T | undefined>undefined,\r\n    read() {\r\n      return (this.value = context.globalState.get(_key))\r\n    },\r\n    async write(newState: T) {\r\n      this.value = newState\r\n      await context.globalState.update(_key, newState)\r\n      return newState\r\n    },\r\n  }\r\n}\r\n","export function deltaFn<F extends () => any>(consume: boolean = false) {\r\n  let delta: F | undefined\r\n  return {\r\n    consume() {\r\n      delta?.()\r\n      delta = undefined\r\n    },\r\n    get fn() {\r\n      return delta\r\n    },\r\n    set fn(value) {\r\n      // TODO: check if this won't break anything else\r\n      if (consume) this.consume()\r\n      delta = value\r\n    },\r\n  }\r\n}\r\nexport function deltaValue<T>(consume: (value: T) => void) {\r\n  let delta: T | undefined\r\n  return {\r\n    consume() {\r\n      if (delta) consume(delta)\r\n      delta = undefined\r\n    },\r\n    get value() {\r\n      return delta\r\n    },\r\n    set value(value) {\r\n      this.consume()\r\n      delta = value\r\n    },\r\n  }\r\n}\r\n","import { extensionId } from 'src/shared/write'\r\nimport * as vscode from 'vscode'\r\nimport packageJson from '../../package.json'\r\nimport { key, updateSettingsCycle } from './settings'\r\nimport {\r\n  IState,\r\n  State,\r\n  calibrationFileName,\r\n  state,\r\n  stateIcon,\r\n} from 'src/shared/state'\r\nimport { Calibrate, calibrateIcon } from 'src/shared/state'\r\nimport { useGlobal, useState } from './utils'\r\nimport path from 'path'\r\nimport { deltaFn, deltaValue } from 'src/shared/utils'\r\n\r\n/**\r\n * The icon's purpose is to indicate the workbench.ts script the extension is active.\r\n */\r\nlet _item: vscode.StatusBarItem | undefined\r\nconst statusIconLoading = 'loading~spin'\r\nconst iconText = '' //' Concise'\r\nlet busy: boolean | undefined\r\nlet disposeConfiguration = deltaFn()\r\nlet crashedMessage = ''\r\n\r\nlet _calibrate: vscode.StatusBarItem | undefined\r\nlet c_busy = false\r\nlet disposeClosedEditor = deltaFn(true)\r\nlet calibrate_confirmation_token = deltaValue<vscode.CancellationTokenSource>(\r\n  (t) => t.dispose()\r\n)\r\n\r\nexport async function ExtensionState_statusBarItem(\r\n  context: vscode.ExtensionContext,\r\n  setState: State\r\n) {\r\n  // TODO: decouple the update from the status bar item\r\n  const extensionState = getStateStore(context)\r\n  const windowState = getWindowState(context)\r\n  const globalInvalidation = getGlobalAnyInvalidate(context)\r\n  const globalCalibration = getGlobalAnyCalibrate(context)\r\n  const calibrationState = getAnyCalibrate(context)\r\n  await windowState.write(setState)\r\n  checkDisposedCommandContext(setState)\r\n\r\n  async function REC_nextStateCycle(\r\n    tryNext: State,\r\n    settings: 'active' | 'inactive',\r\n    overloads: {\r\n      diff?: boolean\r\n      // calibratedThen?: boolean\r\n    } = {}\r\n  ) {\r\n    if (!_item) {\r\n      vscode.window.showErrorMessage('No status bar item found')\r\n      return\r\n    } else if (crashedMessage) {\r\n      vscode.window.showErrorMessage(\r\n        `The extension crashed when updating .vscode/settings.json with property ${key}.textMateRules with error: ${crashedMessage}`\r\n      )\r\n      return\r\n    }\r\n\r\n    try {\r\n      busy = true\r\n\r\n      disposeConfiguration.consume()\r\n      calibrate_confirmation_token.consume()\r\n\r\n      if (calibrationState.read() != state.active) {\r\n        await defaultWindowState(_item, state.stale)\r\n        busy = false\r\n        return\r\n      }\r\n\r\n      _item.text = `$(${statusIconLoading})` + iconText\r\n      const cash = await updateSettingsCycle(context, settings)\r\n\r\n      /**\r\n       * There is a cash waiting to be executed (invalidated)\r\n       * The recursion/watcher was called\r\n       * And the extension is active so now it will fall out of sync\r\n       * Therefor the user deserves to know the settings.json is not up to date\r\n       * It is rude to change the settings.json without the user's consent\r\n       */\r\n      // prettier-ignore\r\n      if (typeof cash == 'function' && overloads.diff && tryNext == state.active && globalInvalidation.read() != state.active) {\r\n\t\t\t\tawait defaultWindowState(_item, state.stale)\r\n        const res = await vscode.window.showInformationMessage(\r\n          \"The extension settings were invalidated while the extension was running. \\\r\n           Shall we add missing extension textMateRules if any and move them to the end to avoid conflicts?\",\r\n          'Yes and remember',\r\n          'No and deactivate',\r\n        )\r\n        const next = res?.includes('Yes') ? state.active : state.inactive\r\n        await globalInvalidation.write(next)\r\n\r\n\t\t\t\tif( next == state.inactive){\r\n\t\t\t\t\tawait defaultWindowState(_item, next)\r\n\t\t\t\t\tbusy = false\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n      }\r\n\r\n      // prettier-ignore\r\n      if (typeof cash == 'function') {\r\n        if (overloads.diff) {\r\n          withProgress({\r\n            title: 'Concise Syntax: revalidating...',\r\n            seconds: 5,\r\n          })\r\n        }\r\n        const task = createTask()\r\n        const watcher = vscode.workspace.onDidChangeConfiguration(task.resolve)\r\n        await cash()\r\n        await Promise.race([\r\n          task.promise, // either the configuration changes or the timeout\r\n          new Promise((resolve) => setTimeout(resolve, 3000)),\r\n        ])\r\n        watcher.dispose()\r\n      }\r\n\r\n      await defaultWindowState(_item, tryNext)\r\n\r\n      // prettier-ignore\r\n      if(tryNext == state.active)\r\n      disposeConfiguration.fn = vscode.workspace.onDidChangeConfiguration(async (config) => {\r\n\t\t\t\tif (busy || !config.affectsConfiguration(key)) return\r\n\t\t\t\tconst next = windowState.read()\r\n\t\t\t\tif (!next) return\r\n\t\t\t\t// TODO: add a throttle to be extra safe\r\n\t\t\t\tawait REC_nextStateCycle(next, binary(next), {diff:true})\r\n\t\t\t}).dispose\r\n\r\n      busy = false\r\n    } catch (error: any) {\r\n      debugger\r\n      crashedMessage = error?.message || 'unknown'\r\n      _item.text = `$(error)` + iconText\r\n      _item.tooltip = IState.encode(state.error)\r\n      _item.show()\r\n      disposeConfiguration.consume()\r\n    }\r\n  }\r\n  async function defaultWindowState(_item: vscode.StatusBarItem, next: State) {\r\n    await windowState.write(next)\r\n    _item.text = `$(${stateIcon})` + iconText\r\n    _item.tooltip = IState.encode(next)\r\n    const failure =\r\n      next == state.disposed || next == state.stale || next == state.error\r\n    await hold(failure ? 1000 : 100)\r\n\r\n    if (failure) {\r\n      _item.hide()\r\n    } else {\r\n      _item.show()\r\n    }\r\n  }\r\n\r\n  if (_item) {\r\n    await REC_nextStateCycle(setState, binary(setState))\r\n    return\r\n  }\r\n\r\n  const toggleCommand = packageJson.contributes.commands[2].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(toggleCommand, async () => {\r\n      if (extensionState.read() == 'disposed') {\r\n        return vscode.window.showInformationMessage(\r\n          'The extension is disposed. Mount it to use this command.'\r\n        )\r\n      }\r\n      if (busy) {\r\n        return vscode.window.showInformationMessage(\r\n          'The extension is busy. Try again in a few seconds.'\r\n        )\r\n      }\r\n\r\n      const next = flip(windowState.read())\r\n      await REC_nextStateCycle(next, next)\r\n    })\r\n  )\r\n\r\n  const remoteCalibratePath = path.join(__dirname, calibrationFileName)\r\n  const uriRemote = vscode.Uri.file(remoteCalibratePath)\r\n\r\n  const calibrateCommand = packageJson.contributes.commands[3].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(calibrateCommand, async () => {\r\n      if (!_calibrate) {\r\n        vscode.window.showErrorMessage('No status bar item found')\r\n        return\r\n      }\r\n      if (extensionState.read() == 'disposed') {\r\n        return vscode.window.showInformationMessage(\r\n          'The extension is disposed. Mount it to use this command.'\r\n        )\r\n      }\r\n      if (c_busy || busy) {\r\n        // FIXME: if any showInformationMessage you are waiting for is hidden to the notification area\r\n        // and the user wants to run this command again, the message is unclear...\r\n        vscode.window.showInformationMessage(\r\n          'The extension is busy. Try again in a few seconds.'\r\n        )\r\n        return\r\n      }\r\n\r\n      // show\r\n      try {\r\n        c_busy = true\r\n\r\n        calibrate_confirmation_token.consume()\r\n\r\n        if (globalCalibration.read() != state.active) {\r\n          const res = await vscode.window.showInformationMessage(\r\n            'The Concise Syntax extension will add/remove textMateRules in .vscode/settings.json to sync up with the window state. \\\r\n\t\t\t\t\t\tDo you want to continue?',\r\n            'Yes and remember',\r\n            'No and deactivate'\r\n          )\r\n          const next = res?.includes('Yes') ? state.active : state.inactive\r\n          await globalCalibration.write(next)\r\n          checkCalibratedCommandContext(next) // where should you put this?\r\n\r\n          if (next == state.inactive && windowState.read() != state.active) {\r\n            c_busy = false\r\n            return\r\n          }\r\n        }\r\n\r\n        // FIXME: get me out of here\r\n        if (windowState.read() != state.active) {\r\n          checkCalibratedCommandContext(state.active) // where should you put this?\r\n          // makes sense right? because having to activate two times is a bit annoying...\r\n          await REC_nextStateCycle(state.active, state.active)\r\n        }\r\n\r\n        await tryUpdateCalibrateState('opening')\r\n        const document = await vscode.workspace.openTextDocument(uriRemote)\r\n        const editor = await vscode.window.showTextDocument(document, {\r\n          preview: false,\r\n          preserveFocus: false,\r\n        })\r\n\r\n        disposeClosedEditor.fn = onDidCloseTextDocument(async (doc) => {\r\n          if (doc.uri.path === uriRemote.path && editor.document.isClosed) {\r\n            await consume_close()\r\n            return true\r\n          }\r\n        })\r\n\r\n        await new Promise((resolve) => setTimeout(resolve, 1000)) // FIXME: find the perfect time to notify the dom\r\n        await tryUpdateCalibrateState('opened', 500)\r\n\r\n        checkCalibratedCommandContext(state.active) // where should you put this?\r\n\r\n        withProgress({\r\n          title: 'Concise Syntax: calibrated you may close the file',\r\n          seconds: 10,\r\n        })\r\n\r\n        c_busy = false\r\n      } catch (error: any) {\r\n        debugger\r\n        await consume_close()\r\n        vscode.window.showErrorMessage(\r\n          `Error: failed to open calibrate file -> ${error?.message}`\r\n        )\r\n      }\r\n      function consume_close() {\r\n        disposeClosedEditor.consume()\r\n        return tryUpdateCalibrateState('closed')\r\n      }\r\n      function tryUpdateCalibrateState(state: Calibrate, t = 100) {\r\n        _calibrate!.tooltip = state\r\n        return hold(t)\r\n      }\r\n    })\r\n  )\r\n  async function checkCalibratedCommandContext(next: State) {\r\n    vscode.commands.executeCommand(\r\n      'setContext',\r\n      'extension.calibrated',\r\n      next == state.active\r\n    )\r\n    // https://stackoverflow.com/a/74468400\r\n    await calibrationState.write(next)\r\n  }\r\n\r\n  _item = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Right, 0)\r\n  _item.command = toggleCommand\r\n\r\n  _calibrate = vscode.window.createStatusBarItem(\r\n    vscode.StatusBarAlignment.Right,\r\n    0\r\n  )\r\n  _calibrate.command = calibrateCommand\r\n  _calibrate.text = `$(${calibrateIcon})`\r\n  _calibrate.tooltip = 'bootUp'\r\n  _calibrate.show()\r\n\r\n  const next = windowState.read() ?? 'active'\r\n  await REC_nextStateCycle(next, binary(next))\r\n\r\n  context.subscriptions.push(_item, {\r\n    dispose() {\r\n      disposeConfiguration.consume()\r\n      disposeClosedEditor.consume()\r\n      calibrate_confirmation_token.consume()\r\n    },\r\n  })\r\n}\r\n\r\nexport async function wipeAllState(context: vscode.ExtensionContext) {\r\n  const states = [\r\n    getStateStore(context),\r\n    getWindowState(context),\r\n    getGlobalAnyInvalidate(context),\r\n    getGlobalAnyCalibrate(context),\r\n    getAnyCalibrate(context),\r\n  ]\r\n  for (const iterator of states) {\r\n    await iterator.write(undefined as any)\r\n  }\r\n  return context\r\n}\r\n\r\nfunction withProgress(params: { title: string; seconds: number }) {\r\n  return vscode.window.withProgress(\r\n    {\r\n      location: vscode.ProgressLocation.Window,\r\n      title: params.title,\r\n      cancellable: true,\r\n    },\r\n    // prettier-ignore\r\n    async () => new Promise(async (resolve) => {\r\n\t\t\tcalibrate_confirmation_token.value = new vscode.CancellationTokenSource()\r\n\t\t\tconst dispose = calibrate_confirmation_token.value.token.onCancellationRequested(() => {\r\n\t\t\t\tcalibrate_confirmation_token.consume()\r\n\t\t\t\tdispose()\r\n\t\t\t\tresolve(null)\r\n\t\t\t}).dispose\r\n\t\t\tfor (let i = 0; i < params.seconds; i++) {\r\n\t\t\t\tawait hold(1_000)\r\n\t\t\t}\r\n\t\t\tresolve(null)\r\n\t\t})\r\n  )\r\n}\r\n\r\nexport function checkDisposedCommandContext(next?: State) {\r\n  vscode.commands.executeCommand(\r\n    'setContext',\r\n    'extension.disposed',\r\n    next == state.disposed\r\n  )\r\n  vscode.commands.executeCommand(\r\n    'setContext',\r\n    'extension.running',\r\n    next == state.active || next == state.inactive\r\n  )\r\n}\r\n\r\nfunction onDidCloseTextDocument(\r\n  tryClose: (doc: { uri: { path: string } }) => Promise<boolean | undefined>\r\n) {\r\n  // https://github.com/microsoft/vscode/issues/102737#issuecomment-660208607\r\n  // prettier-ignore\r\n  return (vscode.window as any).tabGroups?.onDidChangeTabs?.(async (changedEvent:any) => {\r\n\t\tfor (const doc of Array.from(changedEvent.closed)) {\r\n\t\t\tif (await tryClose((doc as any).input)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t})?.dispose || \r\n\t// this is delayed by 4-5 minutes, so it's not reliable\r\n\tvscode.workspace.onDidCloseTextDocument(async (doc) => {\r\n\t\tif (await tryClose(doc)) {\r\n\t\t\t// noop\r\n\t\t} else{\r\n\t\t\t// sometimes the callback decides to not work :D\r\n\t\t\tfor (const editor of vscode.window.visibleTextEditors) {\r\n\t\t\t\tif (await tryClose(editor.document)) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}).dispose\r\n}\r\n// prettier-ignore\r\n// If they deprecate it for good then close whatever is open :(\r\nasync function closeFileIfOpen(file: vscode.Uri) {\r\n\ttry {\r\n\t\t// @ts-ignore\r\n\t\tconst tabs: any = vscode.window.tabGroups.all.map(tg => tg.tabs).flat();\r\n\t\t// @ts-ignore\r\n\t\tconst index = tabs.findIndex(tab => tab.input instanceof vscode.TabInputText && tab.input.uri.path === file.path);\r\n\t\tif (index !== -1) {\r\n\t\t\t// @ts-ignore\r\n\t\t\t\treturn await vscode.window.tabGroups.close(tabs[index]);\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tvscode.commands.executeCommand('workbench.action.closeActiveEditor')\r\n\t}\r\n}\r\n\r\nexport function binary(state?: State) {\r\n  return state == 'active' ? 'active' : 'inactive'\r\n}\r\nfunction flip(next?: State) {\r\n  return next == 'active' ? 'inactive' : 'active'\r\n}\r\n\r\nexport function getAnyCalibrate(context: vscode.ExtensionContext) {\r\n  return useState(context, 'calibrate', <State>{})\r\n}\r\nexport function getGlobalAnyCalibrate(context: vscode.ExtensionContext) {\r\n  return useGlobal(context, 'calibrate', <State>{})\r\n}\r\nexport function getGlobalAnyInvalidate(context: vscode.ExtensionContext) {\r\n  return useGlobal(context, 'invalidate', <State>{})\r\n}\r\nexport function getWindowState(context: vscode.ExtensionContext) {\r\n  return useState(context, 'window', <State>{})\r\n}\r\nexport function getStateStore(context: vscode.ExtensionContext) {\r\n  return useState(context, 'extension', <'active' | 'inactive' | 'disposed'>{})\r\n}\r\nexport function getErrorStore(context: vscode.ExtensionContext) {\r\n  return useState(context, 'error', <'error' | 'throw' | 'unhandled'>{})\r\n}\r\n\r\nfunction createTask() {\r\n  let resolve = (value?: unknown) => {},\r\n    reject = () => {}\r\n  const promise = new Promise((_resolve, _reject) => {\r\n    reject = _reject\r\n    resolve = _resolve\r\n  })\r\n  return { promise, resolve, reject }\r\n}\r\n\r\n// hold this thread and allow the dom to render the state\r\nfunction hold(t = 100) {\r\n  return new Promise((resolve) => setTimeout(resolve, t))\r\n}\r\n","import path from 'path'\r\nimport {\r\n  extensionId,\r\n  patchWorkbench,\r\n  extensionScriptTag,\r\n  preRead,\r\n} from 'src/shared/write'\r\nimport { _catch } from './utils'\r\nimport * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport msg from '../shared/messages'\r\n\r\nexport async function installCycle(context: vscode.ExtensionContext) {\r\n  const res = await read()\r\n  if (res.wasActive) {\r\n    console.log('vscode-concise-syntax is active!')\r\n    return res.wasActive\r\n  }\r\n\r\n  let remoteWorkbenchPath\r\n  let ext = vscode.extensions.getExtension(extensionId)\r\n  if (ext && ext.extensionPath) {\r\n    remoteWorkbenchPath = path.resolve(ext.extensionPath, 'out/workbench.js')\r\n  } else {\r\n    remoteWorkbenchPath = path.resolve(__dirname, 'index.js')\r\n  }\r\n  await patchWorkbench(res, remoteWorkbenchPath)\r\n}\r\n\r\nexport async function uninstallCycle(context: vscode.ExtensionContext) {\r\n  const { html, wasActive, workbench } = await read()\r\n  if (wasActive) {\r\n    const newHtml = html.replaceAll(extensionScriptTag(), '')\r\n    await fs.promises.writeFile(workbench.path, newHtml, 'utf-8')\r\n  }\r\n  await fs.promises.unlink(workbench.customPath).catch(_catch)\r\n\r\n  return wasActive\r\n}\r\n// how do you make javascript freak out about promises/errors?\r\nexport function deactivateCycle() {\r\n  // FIXME: why is this hook not working? :(\r\n  console.log('vscode-concise-syntax is deactivated!')\r\n}\r\nexport async function read() {\r\n  if (!require.main?.filename) {\r\n    vscode.window.showErrorMessage(msg.internalError + 'no main filename')\r\n    throw new Error('no main filename')\r\n  }\r\n  const appDir = path.dirname(require.main.filename)\r\n  const base = path.join(appDir, 'vs', 'code', 'electron-sandbox', 'workbench')\r\n  return await preRead(base)\r\n}\r\n","import * as vscode from 'vscode'\r\nimport msg from '../shared/messages'\r\nimport packageJson from '../../package.json'\r\nimport { extensionId } from '../shared/write'\r\nimport { _catch } from './utils'\r\nimport {\r\n  getErrorStore,\r\n  getStateStore,\r\n  ExtensionState_statusBarItem,\r\n  getWindowState,\r\n  binary,\r\n  checkDisposedCommandContext,\r\n  wipeAllState,\r\n} from './statusBarItem'\r\nimport { installCycle, read, uninstallCycle } from './extensionCycle'\r\nimport { state } from '../shared/state'\r\nexport { deactivateCycle as deactivate } from './extensionCycle'\r\n\r\nexport async function activate(context: vscode.ExtensionContext) {\r\n  // return wipeAllState(context).then(uninstallCycle)\r\n\r\n  const resetCommand = packageJson.contributes.commands[4].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(resetCommand, () =>\r\n      wipeAllState(context)\r\n        .then(uninstallCycle)\r\n        .then(() =>\r\n          vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n        )\r\n    )\r\n  )\r\n\r\n  const extensionState = getStateStore(context) // why do I need two active states?\r\n\r\n  // FIXME: use a better state manager or state machine\r\n  const { wasActive } = await read()\r\n\r\n  const reloadCommand = packageJson.contributes.commands[0].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(reloadCommand, async () => {\r\n      try {\r\n        if (extensionState.read() == state.active) {\r\n          vscode.window.showInformationMessage('Already Mounted')\r\n        } else {\r\n          await uninstallCycle(context)\r\n          await installCycle(context)\r\n\r\n          if (!wasActive) {\r\n            await extensionState.write(state.inactive)\r\n            reloadWindowMessage(msg.enabled)\r\n          } else {\r\n            await extensionState.write(state.active)\r\n            await ExtensionState_statusBarItem(context, state.active)\r\n            vscode.window.showInformationMessage('Mount: using cache')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      }\r\n    })\r\n  )\r\n  const disposeCommand = packageJson.contributes.commands[1].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(disposeCommand, async () => {\r\n      try {\r\n        const wasActive = await uninstallCycle(context)\r\n        await extensionState.write(state.disposed)\r\n        await ExtensionState_statusBarItem(context, state.disposed)\r\n\r\n        const [message, ...options] = wasActive\r\n          ? ['Disposed', 'Reload', 'Uninstall']\r\n          : ['Already Disposed', 'Uninstall']\r\n        // prettier-ignore\r\n        const selection = await vscode.window.showInformationMessage(message, ...options)\r\n\r\n        if (selection == 'Reload') {\r\n          vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n        } else if (selection == 'Uninstall') {\r\n          vscode.commands.executeCommand(\r\n            'workbench.extensions.action.uninstallExtension',\r\n            extensionId\r\n          )\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      }\r\n    })\r\n  )\r\n\r\n  try {\r\n    const previousExtensionState = extensionState.read()\r\n    // FIXME: get me out of here\r\n    checkDisposedCommandContext(previousExtensionState)\r\n\r\n    if (previousExtensionState != state.disposed) {\r\n      const isActive = await installCycle(context)\r\n      await extensionState.write(state.active)\r\n\r\n      if (!wasActive) {\r\n        reloadWindowMessage(msg.enabled)\r\n      } else {\r\n        const windowState =\r\n          previousExtensionState == state.inactive && isActive\r\n            ? state.active\r\n            : binary(getWindowState(context).read() ?? state.active)\r\n        await ExtensionState_statusBarItem(context, windowState)\r\n      }\r\n    }\r\n  } catch (error) {\r\n    __catch(error)\r\n  }\r\n\r\n  console.log('vscode-concise-syntax is active')\r\n\r\n  function __catch(e: unknown) {\r\n    console.error(e)\r\n    const error = getErrorStore(context)\r\n    error.write('unhandled')\r\n  }\r\n}\r\n\r\nfunction reloadWindowMessage(message: string) {\r\n  vscode.window\r\n    .showInformationMessage(message, { title: msg.restartIde })\r\n    .then((selection) => {\r\n      if (selection) {\r\n        vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n      }\r\n    })\r\n}\r\n"],"names":["extensionId","i","vscode","fs","state","key","type","next","_item","wasActive"],"mappings":"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"}