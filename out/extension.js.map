{"version":3,"file":"extension.js","sources":["../src/shared/messages.ts","../src/shared/write.ts","../src/extension/utils.ts","../src/extension/statusBarItem.ts","../src/extension/extensionCycle.ts","../src/extension/settings.ts","../src/extension/index.ts"],"sourcesContent":["export default {\r\n  admin: 'Run VS Code with admin privileges so the changes can be applied.',\r\n  enabled: 'Concise syntax enabled. Restart to take effect. ',\r\n  disabled:\r\n    'Concise syntax disabled and reverted to default. Restart to take effect.',\r\n  already_disabled: 'Concise syntax already disabled.',\r\n  somethingWrong: 'Something went wrong: ',\r\n  internalError: 'Internal error: ',\r\n  restartIde: 'Restart Visual Studio Code',\r\n  notfound: 'Concise syntax not found.',\r\n  notConfigured: 'Concise syntax path not configured.',\r\n  reloadAfterVersionUpgrade:\r\n    'Detected reloading Concise syntax after VSCode is upgraded. ' +\r\n    'Performing application only.',\r\n  cannotLoad: (url: string) => `Cannot load '${url}'. Skipping.` as const,\r\n} as const\r\n","import fs from 'fs'\r\nimport path from 'path'\r\nimport packageJson from '../../package.json'\r\n\r\nexport const extensionId = packageJson.publisher + '.' + packageJson.name\r\nexport const extensionScriptSrc = extensionId + '.js'\r\nexport const extensionScriptTag = () =>\r\n  new RegExp(\r\n    `<script.+${extensionId.replaceAll('.', '\\\\.')}.+\\/script>`,\r\n    'gm' // intermittently\r\n  )\r\n\r\nexport async function patchWorkbench(\r\n  res: Awaited<ReturnType<typeof preRead>>,\r\n  remoteWorkbenchPath: string\r\n) {\r\n  await fs.promises.copyFile(remoteWorkbenchPath, res.workbench.customPath)\r\n\r\n  const hash = ('' + Math.random()).substring(2, 7)\r\n  const newHtml = res.html\r\n    .replaceAll(extensionScriptTag(), '')\r\n    .replace(\r\n      /(<\\/html>)/,\r\n      `<script src=\"${extensionScriptSrc}?${hash}\"></script>` + '</html>'\r\n    )\r\n\r\n  await fs.promises.writeFile(res.workbench.path, newHtml, 'utf-8')\r\n}\r\nexport async function preRead(base: string) {\r\n  const workbenchPath = path.join(base, 'workbench.html')\r\n  const html = await fs.promises.readFile(workbenchPath, 'utf-8')\r\n  const wasActive = html.match(extensionScriptTag())\r\n  return {\r\n    html,\r\n    wasActive,\r\n    workbench: {\r\n      path: workbenchPath,\r\n      customPath: path.join(base, extensionScriptSrc),\r\n    },\r\n  }\r\n}\r\n","// FIXME: handle the errors where it is being used\r\nexport function _catch(e: unknown) {}\r\n","import { extensionId } from 'src/shared/write'\r\nimport * as vscode from 'vscode'\r\nimport packageJson from '../../package.json'\r\n\r\nlet _item: vscode.StatusBarItem\r\n/**\r\n * The icon's purpose is to indicate the workbench.ts script the extension is active.\r\n */\r\nexport async function statusBarItem(\r\n  context: vscode.ExtensionContext,\r\n  wasActive?: boolean\r\n) {\r\n  const active = stateManager<'true' | 'false'>(\r\n    context,\r\n    extensionId + '.active'\r\n  )\r\n  if (wasActive !== undefined) {\r\n    await active.write(wasActive ? 'true' : 'false')\r\n  }\r\n\r\n  const tooltip = (previous: boolean) =>\r\n    (_item.tooltip = `Concise Syntax: ` + (previous ? 'active' : 'inactive'))\r\n\r\n  if (_item) {\r\n    if (wasActive !== undefined) {\r\n      tooltip(wasActive)\r\n    }\r\n    return\r\n  }\r\n\r\n  async function toggle(next: boolean) {\r\n    tooltip(next)\r\n    await active.write(next ? 'true' : 'false')\r\n  }\r\n  const getActive = () => !!JSON.parse(active.read() ?? 'false')\r\n\r\n  const myCommandId = packageJson.contributes.commands[2].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(myCommandId, async () => {\r\n      await toggle(!getActive())\r\n    })\r\n  )\r\n  const item = vscode.window.createStatusBarItem(\r\n    vscode.StatusBarAlignment.Right,\r\n    100\r\n  )\r\n  _item = item\r\n  item.command = myCommandId\r\n  item.text = `$(symbol-keyword) Concise`\r\n  tooltip(getActive())\r\n  item.show()\r\n  context.subscriptions.push(item)\r\n}\r\n\r\nexport function getStateStore(context: vscode.ExtensionContext) {\r\n  return stateManager<'active' | 'restart' | 'disposed'>(\r\n    context,\r\n    extensionId + '.state'\r\n  )\r\n}\r\nexport function getErrorStore(context: vscode.ExtensionContext) {\r\n  return stateManager<'error' | 'throw' | 'unhandled'>(\r\n    context,\r\n    extensionId + '.error'\r\n  )\r\n}\r\nfunction stateManager<T extends string>(\r\n  context: vscode.ExtensionContext,\r\n  key: string\r\n) {\r\n  return {\r\n    value: '' as any,\r\n    read() {\r\n      return (this.value = context.globalState.get(key) as T | undefined)\r\n    },\r\n    async write(newState: T) {\r\n      this.value = newState\r\n      await context.globalState.update(key, newState)\r\n      return newState\r\n    },\r\n  }\r\n}\r\n","import path from 'path'\r\nimport {\r\n  extensionId,\r\n  patchWorkbench,\r\n  extensionScriptTag,\r\n  preRead,\r\n} from 'src/shared/write'\r\nimport { getStateStore, statusBarItem } from './statusBarItem'\r\nimport { _catch } from './utils'\r\nimport * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport msg from '../shared/messages'\r\n\r\nexport async function installCycle(context: vscode.ExtensionContext) {\r\n  const state = getStateStore(context)\r\n\r\n  const res = await read()\r\n  if (res.wasActive) {\r\n    console.log('vscode-concise-syntax is active!')\r\n    await statusBarItem(context, true)\r\n    await state.write('active')\r\n    return true\r\n  }\r\n\r\n  let remoteWorkbenchPath\r\n  let ext = vscode.extensions.getExtension(extensionId)\r\n  if (ext && ext.extensionPath) {\r\n    remoteWorkbenchPath = path.resolve(ext.extensionPath, 'out/workbench.js')\r\n  } else {\r\n    remoteWorkbenchPath = path.resolve(__dirname, 'index.js')\r\n  }\r\n  await patchWorkbench(res, remoteWorkbenchPath)\r\n\r\n  await state.write('restart')\r\n}\r\n\r\nexport async function uninstallCycle(context: vscode.ExtensionContext) {\r\n  const state = getStateStore(context)\r\n\r\n  const { html, wasActive, workbench } = await read()\r\n  if (wasActive) {\r\n    const newHtml = html.replaceAll(extensionScriptTag(), '')\r\n    await fs.promises.writeFile(workbench.path, newHtml, 'utf-8')\r\n  }\r\n  await fs.promises.unlink(workbench.customPath).catch(_catch)\r\n  await state.write('restart')\r\n\r\n  return wasActive\r\n}\r\n// how do you make javascript freak out about promises/errors?\r\nexport function deactivateCycle() {\r\n  // FIXME: why is this hook not working? :(\r\n  console.log('vscode-concise-syntax is deactivated!')\r\n}\r\nexport async function read() {\r\n  if (!require.main?.filename) {\r\n    vscode.window.showErrorMessage(msg.internalError + 'no main filename')\r\n    throw new Error('no main filename')\r\n  }\r\n  const appDir = path.dirname(require.main.filename)\r\n  const base = path.join(appDir, 'vs', 'code', 'electron-sandbox', 'workbench')\r\n  return await preRead(base)\r\n}\r\n","import * as vscode from 'vscode'\r\nimport * as fs from 'fs'\r\nimport * as path from 'path'\r\nimport packageJson from '../../package.json'\r\nimport { _catch } from './utils'\r\n\r\nconst key = 'editor.tokenColorCustomizations'\r\nconst textMateRules = [\r\n  {\r\n    name: 'kauderk.concise-syntax.text',\r\n    scope: ['meta.jsx.children.tsx'],\r\n    settings: {\r\n      foreground: '#B59E7A',\r\n    },\r\n  },\r\n  {\r\n    name: 'kauderk.concise-syntax.redundant',\r\n    scope: [\r\n      'punctuation.definition.tag.begin.tsx',\r\n      'punctuation.definition.tag.end.tsx',\r\n      'punctuation.section.embedded.begin.tsx',\r\n      'punctuation.section.embedded.end.tsx',\r\n      'punctuation.terminator.statement.tsx',\r\n      'concise.redundant-syntax',\r\n    ],\r\n    settings: {\r\n      foreground: '#00b51b00',\r\n    },\r\n  },\r\n  {\r\n    name: 'kauderk.concise-syntax.quote.begin',\r\n    scope: ['punctuation.definition.string.begin.tsx'],\r\n    settings: {\r\n      foreground: '#b5a90000',\r\n    },\r\n  },\r\n  {\r\n    name: 'kauderk.concise-syntax.quote.end',\r\n    scope: ['punctuation.definition.string.end.tsx'],\r\n    settings: {\r\n      foreground: '#b5030000',\r\n    },\r\n  },\r\n]\r\n\r\nexport async function createSettingsCycle() {\r\n  const operation = 'add' as 'remove' | 'add'\r\n  // TODO: avoid writing defensive code, someone else surely knows a better way to do this\r\n\r\n  const workspace = vscode.workspace.workspaceFolders?.[0].uri\r\n  if (!workspace) {\r\n    vscode.window.showErrorMessage(\r\n      'No workspace found: cannot update textMateRules'\r\n    )\r\n    return //break updateSettings\r\n  }\r\n\r\n  const settingsJsonPath = '.vscode/settings.json'\r\n  const userSettingsPath = workspace.fsPath + '/' + settingsJsonPath\r\n\r\n  const read = await fs.promises\r\n    .readFile(userSettingsPath, 'utf-8')\r\n    // https://stackoverflow.com/a/73298406 parse JSON with comments\r\n    .then((raw_json) => [new Function('return ' + raw_json)(), raw_json])\r\n    .catch(_catch)\r\n  const [config, raw_json]: [any, string] = (read as any) ?? []\r\n  if (!config) {\r\n    vscode.window.showErrorMessage(\r\n      `Cannot read ${settingsJsonPath}: does not exist or is not valid JSON`\r\n    )\r\n    return //break updateSettings\r\n  }\r\n  // FIXME: figure out why this method returns a Proxy with global values such as Light and Dark themes\r\n  // let tokens: typeof shape | undefined = await vscode.workspace.getConfiguration(undefined, workspace)?.get(key)\r\n  let userRules: DeepPartial<typeof textMateRules> | undefined =\r\n    config?.[key]?.textMateRules\r\n\r\n  if (userRules && !Array.isArray(userRules)) {\r\n    vscode.window.showErrorMessage(\r\n      `${settingsJsonPath}: ${key}.textMateRules is not an array`\r\n    )\r\n    return //break updateSettings\r\n  }\r\n  const isEmpty = !userRules || userRules?.length == 0\r\n\r\n  if (operation == 'remove') {\r\n    if (isEmpty) {\r\n      return //break updateSettings\r\n    } else {\r\n      // remove only the extension's textMateRules\r\n      userRules = userRules?.filter(\r\n        (rule) => !textMateRules.find((r) => r.name == rule?.name)\r\n      )\r\n    }\r\n  } else if (operation == 'add') {\r\n    if (isEmpty) {\r\n      userRules = textMateRules\r\n    } else {\r\n      userRules ??= []\r\n      let conflictScopes: [description: string, string][] = []\r\n\r\n      conflicts: for (let i = 0; i < userRules.length; i++) {\r\n        const userRule = userRules[i]\r\n        if (!userRule || textMateRules.some((r) => r.name == userRule.name))\r\n          continue\r\n        const userScope = userRule.scope ?? []\r\n        const potentialConflictScopes = userScope.reduce((acc, scope) => {\r\n          if (\r\n            scope &&\r\n            textMateRules.some((r) =>\r\n              r.scope.some((_scope) => _scope === scope)\r\n            )\r\n          ) {\r\n            acc.push(scope)\r\n          }\r\n          return acc\r\n        }, <string[]>[])\r\n\r\n        if (!potentialConflictScopes.length) continue conflicts\r\n        conflictScopes.push([\r\n          `${i}: ${userRule.name || ''}`,\r\n          potentialConflictScopes.join(', '),\r\n        ])\r\n\r\n        // TODO: this should be an option...\r\n        userRule.scope = userScope.filter(\r\n          (scope) => scope && !potentialConflictScopes.includes(scope)\r\n        )\r\n      }\r\n      // TODO: this should be an option...\r\n      userRules = userRules.filter((r) => r?.scope?.length)\r\n\r\n      // add what is missing\r\n      addition: for (const rule of textMateRules) {\r\n        const exist = userRules.some((r, i) => {\r\n          const match = r?.name === rule.name\r\n          if (match) {\r\n            userRules![i] = rule // ! userRules is ok\r\n            return true\r\n          }\r\n          return match\r\n        })\r\n        if (!exist) {\r\n          userRules.push(rule)\r\n        }\r\n      }\r\n      // FIXME: make this explicit, don't change by value\r\n      config[key].textMateRules = userRules\r\n\r\n      if (conflictScopes.length) {\r\n        const diff = 'Show Conflicts'\r\n        const addAnyway = 'Write Settings'\r\n        const result = await vscode.window.showWarningMessage(\r\n          `${settingsJsonPath}: ${key}.textMateRules: Conflict scopes detected`,\r\n          diff,\r\n          addAnyway\r\n        )\r\n\r\n        if (result == diff) {\r\n          const remoteSettingsPath = path.join(\r\n            __dirname,\r\n            'remote.settings.jsonc'\r\n          )\r\n          // debugger\r\n          // create a remote file with the new changes\r\n          const userIndentSpaceInt = 2 // TODO: parse from user settings\r\n          // TODO: maintain last empty line?\r\n          const indentationOffset = ' '.repeat(userIndentSpaceInt)\r\n          const remoteJson = JSON.stringify(userRules, null, userIndentSpaceInt)\r\n            // add space indentation to remoteJson\r\n            .replace(\r\n              /^(?!\\s*$)/gm,\r\n              indentationOffset.repeat(2) // add indentation to each line\r\n            )\r\n            // remove first indentation\r\n            .replace(indentationOffset, '')\r\n\r\n          const replaceRegex =\r\n            /\"textMateRules\"\\s*:\\s*\\[\\s*((?:(?:(?!}\\s*])[^\\[\\]]*)|\\[[^\\[\\]]*\\])*\\s*)\\]/gm\r\n          // replace the array group match in raw_json with the remoteJson\r\n          const virtualJson = raw_json.replace(\r\n            replaceRegex,\r\n            `\"textMateRules\": ${remoteJson}`\r\n          )\r\n          // debugger\r\n          // TODO: write the remote file to directory without git tracking to avoid annoying Toast notifications\r\n          await fs.promises.writeFile(remoteSettingsPath, virtualJson, 'utf-8')\r\n\r\n          vscode.commands.executeCommand(\r\n            'vscode.diff',\r\n            vscode.Uri.file(userSettingsPath),\r\n            vscode.Uri.file(remoteSettingsPath),\r\n            `${packageJson.displayName} settings.json (diff)`\r\n          )\r\n          // TODO: IF the user closes the Toast add a command to continue/check settings updates\r\n          const result = await vscode.window.showWarningMessage(\r\n            `Accept settings?`,\r\n            'Show', // TODO:\r\n            'More', // TODO:\r\n            'Yes',\r\n            'No'\r\n          )\r\n          if (result == 'Yes') {\r\n            await writeUserSettings(config)\r\n          }\r\n        } else if (result == addAnyway) {\r\n          await writeUserSettings(config)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n// Overwrite entire parent setting\r\nasync function writeUserSettings(config: any) {\r\n  await vscode.workspace\r\n    .getConfiguration()\r\n    .update(key, config[key], vscode.ConfigurationTarget.Workspace)\r\n}\r\ntype DeepPartial<T> = T extends object\r\n  ? {\r\n      [P in keyof T]?: DeepPartial<T[P]>\r\n    }\r\n  : T\r\n","import * as vscode from 'vscode'\r\nimport msg from '../shared/messages'\r\nimport packageJson from '../../package.json'\r\nimport { extensionId } from '../shared/write'\r\nimport { _catch } from './utils'\r\nimport { getErrorStore, getStateStore, statusBarItem } from './statusBarItem'\r\nimport { installCycle, read, uninstallCycle } from './extensionCycle'\r\nimport { createSettingsCycle } from './settings'\r\nexport { deactivateCycle as deactivate } from './extensionCycle'\r\n\r\nexport async function activate(context: vscode.ExtensionContext) {\r\n  const state = getStateStore(context)\r\n\r\n  // FIXME: use a better state manager or state machine\r\n  const { wasActive } = await read()\r\n\r\n  const reloadCommand = packageJson.contributes.commands[0].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(reloadCommand, async () => {\r\n      try {\r\n        if (state.read() == 'active') {\r\n          vscode.window.showInformationMessage('Already Mounted')\r\n        } else {\r\n          await uninstallCycle(context)\r\n          await installCycle(context)\r\n          if (!wasActive) {\r\n            reloadWindowMessage(msg.enabled)\r\n          } else {\r\n            await statusBarItem(context, true)\r\n            vscode.window.showInformationMessage('Mount: using cache')\r\n          }\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      }\r\n    })\r\n  )\r\n  const disposeCommand = packageJson.contributes.commands[1].command\r\n  context.subscriptions.push(\r\n    vscode.commands.registerCommand(disposeCommand, async () => {\r\n      try {\r\n        const wasActive = await uninstallCycle(context)\r\n        await statusBarItem(context, false)\r\n\r\n        const [message, ...options] = wasActive\r\n          ? ['Disposed', 'Reload', 'Uninstall']\r\n          : ['Already Disposed', 'Uninstall']\r\n        // prettier-ignore\r\n        const selection = await vscode.window.showInformationMessage(message, ...options)\r\n\r\n        if (selection == 'Reload') {\r\n          vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n        } else if (selection == 'Uninstall') {\r\n          vscode.commands.executeCommand(\r\n            'workbench.extensions.action.uninstallExtension',\r\n            extensionId\r\n          )\r\n        }\r\n      } catch (error) {\r\n        __catch(error)\r\n      } finally {\r\n        await state.write('disposed')\r\n      }\r\n    })\r\n  )\r\n\r\n  try {\r\n    createSettingsCycle()\r\n  } catch (error) {\r\n    vscode.window.showErrorMessage(\r\n      msg.internalError + 'failed to validate user settings'\r\n    )\r\n  }\r\n\r\n  if (state.read() != 'disposed') {\r\n    installCycle(context)\r\n      .then(() => {\r\n        if (!wasActive) {\r\n          reloadWindowMessage(msg.enabled)\r\n        }\r\n      })\r\n      .catch(__catch)\r\n  } else if (wasActive) {\r\n    await statusBarItem(context) // FIXME: this is not persistent\r\n  }\r\n\r\n  console.log('vscode-concise-syntax is active')\r\n\r\n  function __catch(e: unknown) {\r\n    console.error(e)\r\n    const error = getErrorStore(context)\r\n    error.write('unhandled').catch(_catch)\r\n  }\r\n}\r\n\r\nfunction reloadWindowMessage(message: string) {\r\n  vscode.window\r\n    .showInformationMessage(message, { title: msg.restartIde })\r\n    .then((selection) => {\r\n      if (selection) {\r\n        vscode.commands.executeCommand('workbench.action.reloadWindow')\r\n      }\r\n    })\r\n}\r\n"],"names":["vscode","key","fs","read","raw_json","path","result","wasActive"],"mappings":"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"}